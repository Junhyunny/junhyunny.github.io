---
title: "Multiple SNS Login with Spring Security OAuth2 Client"
search: false
category:
  - java
  - design-pattern
  - spring-boot
last_modified_at: 2023-11-15T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

- [OAuth2 LINE Login with Spring Security][oauth2-line-login-link]
- [How to make stub for super class][stub-for-super-class-link]

## 0. 들어가면서

최근 프로젝트들이 모두 OAuth2 프로토콜을 통해 사용자 인증을 구현했습니다. 하나의 플랫폼만 연결하는 경우도 있었지만, 다중 플랫폼의 인증을 구현한 케이스도 있었습니다. 다중 플랫폼을 연결할 때는 플랫폼이 늘어날 때마다 확장성을 고려해야 합니다. 스프링 프레임워크(spring framework)의 프로파일 기능과 디자인 패턴을 통해 조금 더 확장하기 쉬운 애플리케이션을 개발한 내용에 대해 정리하였습니다. 

## 1. Spring Security OAuth2 Client

스프링 시큐리티(spring security) 의존성 중 하나인 `spring-boot-starter-oauth2-client`를 사용하면 OAuth2 프로토콜 표준에 맞춰 사용자 인증과 인가 작업을 쉽게 구현할 수 있습니다. 다만 스프링 시큐리티는 공부하지 않고 사용하는 경우 블랙 박스(black box)처럼 느껴지기 때문에 사용하기 어려워하는 경우가 있습니다. OAuth2 프로토콜 인증 흐름을 따라 스프링 시큐리티 OAuth2 클라이언트 의존성이 동작하는 과정을 정리하면서 어느 부분의 기능을 확장하였는지 살펴보겠습니다. 

### 1.1. Redirect Authentication Page

인터넷 서비스를 사용하는 사람들은 웬만하면 SNS 로그인을 경험해봤을 것 입니다. 돌이켜보면 SNS 로그인 화면은 해당 플랫폼에서 제공한다는 것을 떠올릴 수 있습니다. 인증은 사용자 리소스를 관리하는 플랫폼으로부터 전달받습니다. 브라우저에서 OAuth2 로그인을 시도하면 클라이언트 서비스는 요청을 인증 플랫폼 화면으로 리다이렉트합니다. 

- 브라우저에서 백엔드 서비스로 로그인 요청을 보냅니다.
- 백엔드 서비스는 요청을 해당 플랫폼의 인증 서비스로 리다이렉트합니다. 
- 브라우저는 해당 플랫폼의 로그인 화면을 볼 수 있습니다.

<p align="center">
    <img src="/images/multiple-sns-login-with-spring-security-oauth2-client-01.png" width="100%" class="image__border">
</p>

### 1.2. Get Access Token And User Resource

사용자는 SNS 플랫폼 로그인 화면에서 사용자 아이디와 비밀번호를 입력합니다. 인증이 성공하면 해당 플랫폼에 미리 등록한 리다이렉트 URL로 인증 코드와 함께 요청이 돌아옵니다. 전달 받는 인증 코드는 액세스 토큰을 발급 받을 때 클라이언트 아이디와 시크릿과 함께 사용됩니다. 리다이렉트 URL 돌아온 요청은 다음과 같은 실행 흐름을 가집니다. 

1. 플랫폼 인증 서버는 브라우저를 미리 등록된 경로로 리다이렉트시킵니다.
1. 리다이렉트 요청을 받으면 시큐리티 필터 체인(security filterchain)의 `OAuth2LoginAuthenticationFilter` 객체가 사용자 인가 작업을 수행합니다. 
1. `OAuth2AuthorizationCodeAuthenticationProvider` 객체가 인증 서버로부터 액세스 토큰(access token)을 발급 받습니다. 미리 등록한 클라이언트 아이디, 시크릿 그리고 리다이렉트 URL로 함께 전달받은 인가 코드를 함께 전달합니다.
1. 액세스 토큰 발급이 성공하면 인가 작업은 완료되었다는 의미입니다. `DefaultOAuth2UserService` 객체는 발급 받은 액세스 토큰을 사용해 사용자 정보를 리소스 서버로부터 조회합니다. 

<p align="center">
    <img src="/images/multiple-sns-login-with-spring-security-oauth2-client-02.png" width="100%" class="image__border">
</p>

### 1.3. How can we implement SNS login for multiple platforms?

스프링 시큐리티는 OAuth2 프로토콜 표준을 따르기 때문에 인증, 인가, 리소스 획득 작업은 어떤 플랫폼을 사용하든 동일한 과정을 거칩니다. 플랫폼마다 다른 점은 사용자 정보 스키마입니다. 각 플랫폼마다 다른 모습, 다른 프로퍼티 이름으로 사용자 정보를 반환하기 때문에 이 부분을 맞춰 개발할 필요가 있습니다. 필자는 DefaultOAuth2UserService 클래스를 확장하여 각 플랫폼 별로 획득한 인증된 사용자 정보를 저장 혹은 조회하도록 설계하였습니다. 

- DefaultOAuth2UserService 객체는 통해 부모 클래스 기능을 통해 SNS 플랫폼 리소스 서버로부터 인증된 사용자 정보를 획득합니다.
- DefaultOAuth2UserService 객체는 CustomOAuth2UserService 인터페이스를 구현한 인스턴스들에게 사용자 조회 혹은 저장 작업을 위임합니다.
- CustomOAuth2UserService 인스턴스들은 신규 사용자는 생성하고, 기존 사용자는 찾아 반환합니다.

<p align="center">
    <img src="/images/multiple-sns-login-with-spring-security-oauth2-client-03.png" width="100%" class="image__border">
</p>

## 2. Project Setup

먼저 프로젝트 설정부터 살펴보겠습니다. 어떤 의존성이 필요한지 application.yml 설정 파일을 어떤 식으로 관리하면 좋은지 정리하였습니다. 

### 2.1. build.gradle

- spring-boot-starter-security
    - 스프링 시큐리티 프레임워크
- spring-boot-starter-oauth2-client
    - 스프링 시큐리티 OAuth2 클라이언트 기능

```gradle
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'action.in.blog'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2:2.2.224'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}
```

### 2.2. application-platform.yml 

하나의 파일에 모든 설정이 들어 있는 것은 복잡하기 때문에 플랫폼 별로 설정 파일을 분할합니다. 각 설정 파일을 살펴보겠습니다.

#### 2.2.1. application-google.yml

구글은 스프링 시큐리티에서 필요한 정보를 자동으로 채워주기 때문에 제공자 정보는 별도로 추가하지 않습니다. 클라이언트 아이디, 시크릿, 리다이렉트 URL, 클라이언트 시크릿 전달 방식, 스코프 등의 정보만 작성합니다.

```yml
spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-authentication-method: client_secret_post
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/callback/"
            scope:
              - profile
              - email
```

#### 2.2.2. application-kakao.yml

카카오는 클라이언트, 인증 제공자 정보를 모두 입력합니다. 가독성을 위해 주석으로 설명을 작성하였습니다. 스코프나 인증 제공자 정보는 공식 홈페이지를 참조합니다. 

```yml
spring:
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-authentication-method: client_secret_post # 클라이언트 시크릿 전달 방식
            authorization-grant-type: authorization_code # 인가 방법
            client-id: ${KAKAO_CLIENT_ID} # 클라이언트 아이디
            client-secret: ${KAKAO_CLIENT_SECRET} # 클라이언트 시크릿
            redirect-uri: "{baseUrl}/login/oauth2/callback/" # 리다이렉트 URL
            scope: # 스코프
              - profile_nickname 
              - account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # 인가 서버
            token-uri: https://kauth.kakao.com/oauth/token # 토큰 발급 서버
            user-info-uri: https://kapi.kakao.com/v2/user/me # 사용자 정보 조회 리소스 서버
            user-name-attribute: id # 사용자 정보 스키마에서 사용자 식별자를 찾을 수 있는 키
```

#### 2.2.3. application-naver.md

네이버도 카카오와 마찬가지로 클라이언트, 인증 제공자 정보를 모두 입력합니다. 가독성을 위해 주석으로 설명을 작성하였습니다. 스코프나 인증 제공자 정보는 공식 홈페이지를 참조합니다. 

```yml
spring:
  security:
    oauth2:
      client:
        registration:
          naver:
            authorization-grant-type: authorization_code # 인가 방법
            client-id: ${NAVER_CLIENT_ID} # 클라이언트 아이디
            client-secret: ${NAVER_CLIENT_SECRET} # 클라이언트 시크릿
            redirect-uri: "{baseUrl}/login/oauth2/callback/" # 리다이렉트 URL
            scope: # 스코프
              - email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # 인가 서버
            token-uri: https://nid.naver.com/oauth2.0/token # 토큰 발급 서버
            user-info-uri: https://openapi.naver.com/v1/nid/me # 사용자 정보 조회 리소스 서버
            user-name-attribute: response # 사용자 정보 스키마에서 사용자 식별자를 찾을 수 있는 키
```

### 2.3. application.yml

각 플랫폼 별 설정 파일을 살펴봤습니다. 위 설정 파일들을 애플리케이션이 실행될 때 모두 사용하기 위해 `include` 키워드를 이용합니다. 

- 필요한 프로파일들을 플랫폼 이름으로 정의합니다.

```yml
spring:
  profiles:
    include:
      - kakao
      - naver
      - google
  datasource:
    url: jdbc:h2:mem:test
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      path: /h2-console
      enabled: true
```


## 3. Implementation


## 4. Result



## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

- <https://www.rfc-editor.org/rfc/rfc6749>


[oauth2-line-login-link]: https://junhyunny.github.io/java/spring-boot/spring-security/oauth2-line-login-with-spring-security/
[stub-for-super-class-link]: https://junhyunny.github.io/java/spring-boot/test/how-to-make-stub-for-super-class/