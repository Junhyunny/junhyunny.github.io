---
title: "How to test Intersection Observer"
search: false
category:
  - javascript
  - jest
  - testing-library
  - test-driven-development
last_modified_at: 2022-04-13T23:55:00
---

<br>

👉 해당 포스트를 읽는데 도움을 줍니다.
- [Asynchronous Task In JavaScript][how-to-work-javascript-async-link]

## 0. 들어가면서

무한 스크롤(infinite scroll) 기능을 테스트하기 위한 코드를 작성하면서 만난 에러와 해결하는 과정을 정리하였습니다. 

## 1. Intersection Observer API

`Intersection Observer`는 타겟 엘리먼트(target element)가 관찰하고 있는 화면에 보여지는지 확인하는 Web API 기능입니다. 
이번 포스트는 `Intersection Observer`를 테스트하는 방법을 정리하였기 때문에 간단한 설명과 용어만 정리하고 글을 이어나가겠습니다. 

아래 용어들과 기능에 이해가 필요합니다. 
- 뷰 포트(View Port)는 관찰하고 있는 영역입니다. 
- 타겟 엘리먼트(Target Element)는 관심 대상입니다.
- `Intersection Observer`는 타겟 엘리먼트와 뷰 포트 사이의 교차(cross)를 관찰합니다.
- `Web API` 기능이므로 메인 스레드에 영향을 주지 않고 비동기적인 콜백 함수 호출로 관찰이 가능합니다.

<p align="center">
    <img src="/images/how-to-test-intersection-observer-1.JPG" width="75%" class="image__border">
</p>
<center>https://cross-code.github.io/posts/IntersectionObserver/</center><br>

## 2. 코드 살펴보기

이해를 돕기 위해 구현 코드, 테스트 코드 순서로 기능을 살펴보겠습니다. 
발생한 에러를 확인하고, 이를 보완하기 위한 방법을 정리하였습니다.

### 2.1. 구현 코드



### 2.2. 테스트 코드

##### 에러 발생

### 2.3. 테스트 코드 보완하기

##### 테스트 성공

##### 구현 화면

## CLOSING

#### TEST CODE REPOSITORY
- <https://github.com/Junhyunny/blog-in-action/tree/master/2022-04-13-how-to-test-intersection-observer>

#### REFERENCE
- <https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API>
- <https://heropy.blog/2019/10/27/intersection-observer/>
- <https://cross-code.github.io/posts/IntersectionObserver/>

[how-to-work-javascript-async-link]: https://junhyunny.github.io/information/javascript/how-to-work-javascript-async/