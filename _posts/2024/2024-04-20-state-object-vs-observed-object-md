---
title: "@ObservedObject and @StateObject in SwiftUI"
search: false
category:
  - iOS
  - swift-ui
last_modified_at: 2024-04-20T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

- [MVVM Pattern in SwiftUI][mvvm-pattern-in-ios-link]

## 0. 들어가면서

필자가 개발한 iOS 애플리케이션의 체크 박스(check box) 기능에 버그가 있었다. SwiftUI 프레임워크에 대해 이해도가 낮은 것이 문제였다. 이번 글은 필자가 몰랐던 부분에 대해 정리했다.

## 1. Annotations for subscribing object changes

SwiftUI 프레임워크는 [MVVM(Model-View-ViewModel)][mvvm-pattern-in-ios-link] 패턴을 기술적으로 지원한다. 뷰 컴포넌트는 뷰-모델 컴포넌트에게 상태 관리를 의존한다. 뷰-모델 컴포넌트는 상태 변경을 뷰에게 알릴 수 있도록 @Published 애너테이션을 사용한다. 

뷰 컴포넌트는 뷰-모델 객체를 선언할 때 @ObservedObject 혹은 @StateObject 애너테이션을 사용할 수 있다. 동작하는 모습은 동일한데 둘 사이엔 어떤 차이점이 있길래 구분하여 사용할까? 

### 1.1. @ObservedObject Annotation

뷰 컴포넌트 안에 선언한 ObservableObject 인스턴스 필드 앞에 @ObservedObject 애너테이션을 추가한다. ObservableObject 인스턴스가 공개한(published) 상태가 변화할 때마다 화면을 다시 그리려면 이 애너테이션이 필드 앞에 붙어 있어야 한다.

공식 문서에서는 서브-뷰(subview)에게 StateObject 인스턴스를 전달할 때 사용한다고 정리되어 있다. 

> You typically do this to pass a StateObject into a subview.

예제 코드를 살펴보자. 

1. 부모 뷰 컴포넌트에서 ObservableObject 인스턴스를 사용한다. 
  - @StateObject 애너테이션을 추가해 데이터 변경에 대한 이벤트를 전달 받는다.
2. 자식 뷰 컴포넌트에게 ObservableObject 인스턴스를 전달한다.
3. 자식 뷰 컴포너느는 부모로부터 ObservableObject 인스턴스를 전달 받는다.
  - @ObservedObject 애너테이션을 추가해 데이터 변경에 대한 이벤트를 전달 받는다.

```swift
class DataModel: ObservableObject {
    @Published var name = "Some Name"
    @Published var isEnabled = false
}

struct MyView: View {
    @StateObject private var model = DataModel() // 1

    var body: some View {
        Text(model.name)
        MySubView(model: model) // 2
    }
}

struct MySubView: View {
    @ObservedObject var model: DataModel // 3

    var body: some View {
        Toggle("Enabled", isOn: $model.isEnabled)
    }
}
```

### 1.2. @StateObject Annotation

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

- <https://developer.apple.com/documentation/swiftui/observedobject>
- <https://developer.apple.com/documentation/swiftui/stateobject>
- <https://www.avanderlee.com/swiftui/stateobject-observedobject-differences/>
- <https://pilgwon.github.io/post/state-object-vs-observed-object>
- <https://medium.com/hcleedev/swift-observedobject%EC%99%80-stateobject-4f851ed9ef0d>

[mvvm-pattern-in-ios-link]: https://junhyunny.github.io/ios/swift-ui/design-pattern/mvvm-pattern-in-ios/