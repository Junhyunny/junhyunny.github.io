---
title: "Thread Pool in Java"
search: false
category:
  - java
last_modified_at: 2023-04-25T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

## 1. Thread Pool

스레드 풀(thread pool)은 프로그램의 동시성 실행을 지원하는 디자인 패턴입니다. 
복제된 작업자(replicated workers) 또는 작업자-크루(worker-crew) 모델이라고 불리기도 합니다. 
스레드 풀은 여러 개의 스레드들을 유지한 채로 작업(task)들이 할당되기를 기다립니다. 

<p align="center">
    <img src="/images/thread-pool-in-java-1.JPG" width="80%" class="image__border">
</p>
<center>https://en.wikipedia.org/wiki/Thread_pool</center>

### 1.1. Considerations of Thread Pool Usage

스레드 풀은 다음과 같은 문제를 해결하기 위해 고안된 디자인 패턴입니다. 

* 짧은 작업을 위해 스레드를 생성, 수거하는데 드는 비용을 줄일 수 있습니다.
    * 스레드 생성과 수거는 운영체제의 자원을 사용하기 때문에 비용이 큽니다.
* 미리 생성해 둔 스레드에 작업을 할당하기 때문에 실행 지연을 줄일 수 있습니다.

스레드 풀을 사용하면 다음과 같은 것들을 고려해야 합니다.

* 처리할 작업 대비 너무 많은 스레드가 스레드 풀에 생성되었다면 이는 메모리 낭비입니다. 
* 작업마다 소요 시간이 다르기 때문에 빨리 일이 끝나는 스레드는 

## 2. Types of Thread Pool in Java

Java에서 스레드 풀 기능을 지원하는 클래스들을 살펴보겠습니다. 
정적 팩토리 메소드 패턴으로 구현된 Executors 클래스를 사용하면 쉽게 스레드 풀을 지원하는 객체를 생성할 수 있습니다. 
아래에서 설명할 스레드 풀 관련 클래스들은 모두 ExecutorService 인터페이스를 구현하고 있습니다. 
ExecutorService 인터페이스 API 기능들을 위주로 각 클래스들을 살펴보겠습니다. 

### 2.1. Cached Thread Pool

### 2.2. Fixed Thread Pool

### 2.3. Scheduled Thread Pool

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

* [][]

#### REFERENCE

* <https://en.wikipedia.org/wiki/Thread_pool>
* <https://www.baeldung.com/thread-pool-java-and-guava>
* <https://hamait.tistory.com/612>
* <https://tecoble.techcourse.co.kr/post/2021-09-18-java-thread-pool/>

[]: 