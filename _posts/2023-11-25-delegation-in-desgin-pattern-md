---
title: "Delegation in Design Pattern"
search: false
category:
  - java
  - spring-boot
  - design-pattern
last_modified_at: 2023-11-25T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

- [Proxy Pattern][proxy-pattern-link]

## 1. Delegation

스프링 시큐리티(spring security)를 주제로 책을 집필하기 위해 프레임워크 내부를 탐구하면서 지내고 있습니다. 공부하다보니 스프링 프레임워크 내부에는 `Delegating-`이라는 키워드가 붙은 클래스들이 많다는 사실을 깨달았습니다. 이름에서 알 수 있듯 이런 클래스들의 인스턴스는 자신이 처리해야하는 요청을 다른 인스턴스에게 위임(delegation)합니다. 스프링 프레임워크가 위임을 자주 사용하는 이유가 궁금해 관련된 내용을 정리해봤습니다. 

### 1.1. Delegation Pattern

처음엔 위임 패턴에 대해 찾아봤습니다. 

프록시 패턴(proxy pattern)이나 전략 패턴(strategy pattern)도 모두 위임을 사용합니다. 

### 1.2. Inheritance

### 1.3. Composition

상속과 컴포지션

## 2. Benefits

확장하기 쉽다. 

## 3. 

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

- <https://en.wikipedia.org/wiki/Delegation_pattern>
- <https://june0122.github.io/2021/08/21/design-pattern-delegate/>
- <https://mangkyu.tistory.com/199>
- <https://readystory.tistory.com/202>
- <https://architecture101.blog/2009/02/18/misconception_of_gof_dp/>
- <https://stackoverflow.com/questions/1224830/difference-between-strategy-pattern-and-delegation-pattern>
- <https://minosaekki.tistory.com/64>

[proxy-pattern-link]: https://junhyunny.github.io/information/design-pattern/proxy-pattern/