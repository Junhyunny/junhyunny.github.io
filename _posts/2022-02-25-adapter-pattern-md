---
title: "Adapter Pattern"
search: false
category:
  - information
  - design-pattern
last_modified_at: 2022-02-25T23:55:00
---

<br>

## 0. 들어가면서

스프링 프레임워크를 사용하다보면 `Adapter`라는 단어로 끝나는 단어들이 많이 보입니다. 
어렴풋이 어댑터 패턴(adapter pattern)이 적용되었을 것이라 생각했지만, 왜 어댑터 패턴을 사용하는지 깊게 고민해보진 않았습니다. 
최근 포스트를 작성하기 위해 스프링 내부를 들여다보면서 다양한 어댑터들을 발견했습니다. 
코드들을 읽으면서 디자인 패턴의 구체적인 용도를 알면 코드를 읽고, 분석하는데 더 많은 인사이트(insight)를 얻을 수 있을 것이라는 생각이 들어서 포스트로 정리하였습니다. 

## 1. 어댑터 패턴(Adapter Pattern)

> Design Patterns: Elements of Reusable Object Oriented Software<br>
> 클래스의 인터페이스를 사용자가 기대하는 인터페이스 형태로 적응(변환)시킵니다. 
> 서로 일치하지 않는 인터페이스를 갖는 클래스들을 함께 동작시킵니다. 

`GoF 디자인 패턴` 책을 읽다보면 위에 설명처럼 이해하기 난해한 문장이 많습니다. 
다른 분들은 이해하셨을 수 있지만, 저에겐 다소 어려운 느낌입니다. 
`GoF 디자인 패턴` 책과 다른 레퍼런스(reference)들을 읽어 보고 얻은 인사이트로 제가 이해할 수 있게 리워딩하였습니다. 

##### 클래스 다이어그램

### 1.1. 클래스 어댑터 패턴

### 1.2. 인스턴스 어댑터 패턴

`Java` 특성상 클래스 다중 상속은 어렵지만, 

## 2. Adapter pattern in Spring

### 2.1. Base64TypeAdapter 클래스

```java
package org.springframework.http.converter.json;

import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import java.lang.reflect.Type;
import org.springframework.util.Base64Utils;

public abstract class GsonBuilderUtils {

    public GsonBuilderUtils() {
    }

    public static GsonBuilder gsonBuilderWithBase64EncodedByteArrays() {
        GsonBuilder builder = new GsonBuilder();
        builder.registerTypeHierarchyAdapter(byte[].class, new GsonBuilderUtils.Base64TypeAdapter());
        return builder;
    }

    private static class Base64TypeAdapter implements JsonSerializer<byte[]>, JsonDeserializer<byte[]> {
        private Base64TypeAdapter() {
        }

        public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive(Base64Utils.encodeToString(src));
        }

        public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) {
            return Base64Utils.decodeFromString(json.getAsString());
        }
    }
}
```

## CLOSING

#### TEST CODE REPOSITORY
- <>

#### REFERENCE
- [Design Patterns: Elements of Reusable Object Oriented Software][design-pattern-book-link]
- <https://zion830.tistory.com/44>
- <https://yaboong.github.io/design-pattern/2018/10/15/adapter-pattern/>

[design-pattern-book-link]: https://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9791195444953