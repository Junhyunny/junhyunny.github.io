---
title: "폴링(Polling), 롱 폴링(Long polling) 그리고 스프링 예제(Spring example)"
search: false
category:
  - information
  - spring-boot
  - react
last_modified_at: 2022-01-03T23:55:00
---

<br>

👉 해당 포스트를 읽는데 도움을 줍니다.
- [비동기(Asynchronous) 논블로킹(Non-Blocking) 처리 방식][async-nonblocking-link]

## 0. 들어가면서

대부분 아시겠지만 클라이언트에서 서버 데이터 변경 사항들을 실시간으로 반영하기 위해 폴링(polling), 롱 폴링(long polling) 같은 방법을 사용합니다. 
최근에 우연히 폴링과 롱 폴링에 관련된 포스트를 읽었습니다. 
롱 폴링에 대해 개념 정도는 알고 있었는데, 읽는 순간 번뜩 의문점이 생겼습니다. 

> 롱 폴링은 서버에서 이벤트가 발생하기 전까지 응답을 주지 않아야 하는데 어떤 방식으로 구현하지? 

평소 구현할 기능이 단순하고, 구현이 쉽기 때문에 주로 폴링 방법을 사용하다보니 롱 폴링에 대해 고민해보지 않았습니다. 
제공할 서비스 특징이나 서버 부하를 고려했다면 롱 폴링도 고민해봤을텐데, 아직 모자른 부분이 많은 것 같습니다. 
폴링과 롱 폴링에 대해 비교, 정리하고 주 기술 스택인 스프링으로 간단한 테스트 코드를 작성해보겠습니다. 

## 1. 폴링(Polling)과 롱 폴링(Long Polling)

### 1.1. 폴링(Polling)

처음으로 폴링에 대해서 알아보겠습니다. 
클라이언트가 일정 주기로 서버에게 필요한 데이터를 요청하는 방식입니다. 
가장 쉬운 방법이지만, 변경 사항이 있든지 없든지 계속 요청을 보내기 때문에 서버에 부담을 주게 됩니다. 
데이터를 요청하는 주기가 짧아질수록 부하는 커지게 됩니다. 
네트워크나 HTTP 커넥션(connection)을 맺기 위한 비용이 계속 발생합니다. 

##### 폴링 방식

<p align="center"><img src="/images/polling-long-polling-and-spring-example-1.JPG" width="65%"></p>
<center>이미지 출처, https://rubberduck-debug.tistory.com/123</center><br>

### 1.2. 롱 폴링(Long Polling) 방식

다음으로 롱 폴링에 대해 알아보겠습니다. 
클라이언트가 데이터를 요청하면 서버는 즉시 응답을 주지 않습니다. 
서버는 해당 요청에서 관심을 가지는 무엇인가 변경되는 이벤트가 발생하거나 타임아웃이 발생하면 응답을 전달합니다. 
클라이언트는 서버의 응답을 받은 후 다시 서버로 데이터를 요청합니다. 

##### 롱 폴링 방식

<p align="center"><img src="/images/polling-long-polling-and-spring-example-2.JPG" width="65%"></p>
<center>이미지 출처, https://rubberduck-debug.tistory.com/123</center><br>

### 1.3. 폴링보다 롱 폴링 방식이 항상 유리한가?

폴링은 주기적으로 데이터를 요청하면서 의미없이 서버의 리소스를 소비하게 됩니다. 
언뜻 보기에 이벤트가 발생했을 때만 클라이언트로 응답을 주는 롱 폴링 방식이 유용해보입니다. 
하지만, 항상 그렇지는 않습니다. 
예를 들어 100명이 채팅하는 단체 채팅방을 롱 폴링으로 구현했다고 가정합니다. 
누군가 한마디 메세지를 작성하면 100명이 동시에 응답을 받고, 100명이 동시에 다시 요청을 수행합니다. 
서버의 요청 큐(request queue)에 급작스런 요청이 몰리면서 서버에 부하가 발생할 수 있습니다. 

클라이언트에게 제공해야하는 서비스 성격과 특징에 따라 적절한 방식을 선택하는 것이 좋아보입니다. 
참고한 포스트에서는 다음과 같이 정리하고 있습니다. 
- 롱 폴링 방식 선택
    - 응답을 실시간으로 받아야하는 경우
    - 메신저 같이 1 on 1, 혹은 적은 수의 사용자가 동시에 사용하는 경우
    - 예를 들어, Facebook 웹 채팅, Google 메신저, MSN 웹 메신저
- 폴링 방식 선택
    - 응답을 실시간으로 받지 않아도 되는 경우
    - 다수의 사용자가 동시에 사용하는 경우
    - 예를 들어, 전체 채팅이 필요한 웹 게임

## 2. 스프링(spring)에서 롱 폴링 구현하기

이번 포스트를 작성하게 된 계기, 스프링에서 어떻게 롱 폴링을 구현하는지 정리해보겠습니다. 
일반적으로 HTTP 요청에 대한 응답 방식은 동기식으로 처리됩니다. 
요청에 대한 처리를 수행하는 동안 블록킹(blocking)되며, 모든 처리가 완료된 후에 응답을 전달합니다. 
단순히 롱 폴링을 구현하기보단 간단한 시나리오를 바탕으로 테스트를 구성해보겠습니다. 

##### 테스트 시나리오

<p align="center"><img src="/images/polling-long-polling-and-spring-example-3.JPG" width="75%"></p>

### 2.1. DeferredResult 클래스

> Guide to DeferredResult in Spring<br>
> DeferredResult, available from Spring 3.2 onwards, 
> assists in offloading a long-running computation from an http-worker thread to a separate thread.

롱 폴링 구현에 필요한 주요 클래스에 대해 알아보겠습니다. 
DeferredResult 클래스는 비동기 처리를 위해 등장하였습니다. 
스프링 3.2 부터 사용할 수 있습니다. 
처리가 길어지는 연산을 `http-worker` 스레드가 아닌 다른 별도 스레드에게 분산하기 위해 사용합니다. 
자세한 내용은 다른 비동기 처리 방식들과 함께 별도 포스트로 정리하겠습니다. 

##### DeferredResult 인스턴스 반환을 통한 비동기 처리 방식
- 이번 예제 코드에선 큐(Queue)가 아닌 맵(Map)을 사용하였습니다.

<p align="center"><img src="/images/polling-long-polling-and-spring-example-4.JPG" width="75%"></p>
<center>이미지 출처, https://jongmin92.github.io/2019/03/31/Java/java-async-1/</center><br>

### 2.2. 테스트 코드

### 2.3. 컨트롤러 코드

## CLOSING

#### TEST CODE REPOSITORY
- <https://github.com/Junhyunny/blog-in-action/tree/master/2021-09-26-spring-session>

#### REFERENCE
- <https://rubberduck-debug.tistory.com/123>
- <https://kuimoani.tistory.com/74>
- <https://www.baeldung.com/spring-deferred-result>
- <https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html>
- <https://jongmin92.github.io/2019/03/31/Java/java-async-1/>

[async-nonblocking-link]: https://junhyunny.github.io/information/java/asynchronous-and-non-blocking-process/