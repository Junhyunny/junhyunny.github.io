---
title: "OAuth(Open Authorization)"
search: false
category:
  - information
  - security
last_modified_at: 2022-11-30T23:55:00
---

<br>

## 0. 들어가면서

많이 사용되는 인증(authentication), 인가(authorization) 방식으로 구현은 많이 해봤지만, 이론에 대해서 정확하게 정리한 적이 없었습니다. 
이번 프로젝트에서 팀원들에게 관련된 내용을 공유하는 시간이 있었는데, 블로그 글로 함께 정리하면 좋을 것 같다는 생각에 포스트로 작성하였습니다. 

## 1. OAuth(Open Authorization)

> Wikipedia - OAuth<br/>
> 인터넷 사용자가 비밀번호를 제공하지 않고 특정 웹 사이트나 어플리케이션에서 다른 웹 사이트의 정보에 대한 접근을 허용하는 방법이다.

인증, 인가 표준 방식으로 Amazon, Google, Facebook, Microsoft, Twitter 같은 회사들(이하 서비스 제공자)에서 사용되고 있습니다. 
일반적인 인터넷 사용자가 서드-파티(third-party) 웹 사이트나 어플리케이션에서 서비스 제공자에 저장된 자신의 정보를 사용하고 싶어할 때 발생하는 보안 문제를 해결한 인증 방식입니다. 
서비스 제공자에 저장된 사용자 정보를 사용하기 위해 사용자의 아이디, 비밀번호를 안전한 서비스인지 알 수 없는 서드-파티 어플리케이션에게 직접 제공하는 것은 매우 위험합니다. 
비밀번호 없이 사용자 정보를 사용하기 위한 메커니즘은 무엇인지 살펴보겠습니다. 

### 1.1. History

`OAuth`는 2006년 11월 Twitter 개발자와 Magnolia의 개발자들이 OpenID 구현에 관련된 내용을 논의하기 위해 만나게 되면서 시작합니다. 
그들은 API 접근 위임에 관련된 공개 표준(open standard)이 없는 것을 확인하고, 2007년 4월에 OAuth 논의체를 만듭니다. 
`OAuth` 공개 프로토콜 제안서 초안을 작성하여 공개하고, 많은 지지를 받습니다. 
2010년 IETF(Internet Engineering Task Force)에서 `OAuth 1.0` 공식 표준안이 RFC 5849로 발표됩니다. 

`OAuth 2.0` 프레임워크는 IETF 커뮤니티에 수집된 추가 사례와 확장성을 고려하여 이 후에 발표되었습니다. 
`OAuth 1.0` 배포 환경을 기반으로 구축되었지만, 역호환되지 않습니다. 
2012년 10월에 `OAuth 2.0`은 RFC 6749, 베어러(bearer) 토큰 사용은 RFC 6750으로 발표됩니다. 

## 2. Participants

`OAuth2.0` 기준으로 

### 2.1. Resource Server

### 2.2. Resource Owner

### 2.3. Client

### 2.4. Authorization Server

## 3. Register Process

## 4. Authentication Process

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

- <https://en.wikipedia.org/wiki/OAuth>
- <https://www.rfc-editor.org/rfc/rfc6749>
- <https://www.oauth.com/>
- <https://d2.naver.com/helloworld/24942>
- <https://tecoble.techcourse.co.kr/post/2021-07-10-understanding-oauth/>
