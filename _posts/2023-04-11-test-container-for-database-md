---
title: "TestContainer for Database"
search: false
category:
  - post-format
last_modified_at: 2024-04-11T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

* [Not Change Database with @DataJpaTest][do-not-replace-database-when-using-data-jpa-test-annotation-link]

## 0. 들어가면서

메모리 데이터베이스를 사용할 때 문제점과 이를 해결하고자 사용하는 `TestContainer`에 대해 정리하였습니다. 

## 1. Pain Point of Database for Test

결국 똑같지 않은 데이터베이스이므로 쿼리 실행 시 문제 발생

ANSI / JPQL 모두 문제

테스트는 독립적으로 수행되어야 한다.





데이터베이스 벤더(vendor)에 맞는 도커 컨테이너를 띄워서 테스트
    * 쿼리 문제 해결
테스트할 때만 도커 컨테이너를 실행하기 때문에 메모리를 차지하지 않는다. 
테스트 환경 데이터베이스를 따로 만들지 않는다.
추가 리소스가 필요하지 않다
매번 테스트할 데이터들이 동일하기 때문에 멱등성 있는 테스트가 보장된다. 

테스트를 실행할 때마다 도커 컨테이너를 생성하고 설정하는 시간이 추가된다.
아무리 가벼운 테스트라도 도커 컨테이너를 생성하고 세팅하는 시간이 있어서 시간이 더 소요된다.









### 1.1.

### 1.1. @DataJpaTest Annotation


## 2. TestContainer

> Testcontainers for Java is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.

`TestContainer`는 이번 포스트처럼 단순히 데이터베이스만 지원하지 않습니다. 
많은 기능들을 컨테이너화하고 테스트를 위해 이를 제공합니다.

* 웹 브라우저
    * 셀레니움
* 웹 서버나 프록시
    * nginx, 아파치
* NoSQL 데이터베이스
    * 레디스, 엘라스틱서치, 몽고
* 로그 서비스
    * 카프카, 키바나

## 3. Practice





## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

* <https://www.testcontainers.org/>
* <https://umbum.dev/1127>
* <https://phauer.com/2017/dont-use-in-memory-databases-tests-h2/>
* <https://taes-k.github.io/2021/05/02/spring-test-container/>
* <https://mangchhe.github.io/test/2022/07/22/TestContainers/>

[do-not-replace-database-when-using-data-jpa-test-annotation-link]: https://junhyunny.github.io/spring-boot/jpa/test-driven-development/do-not-replace-database-when-using-data-jpa-test-annotation/