---
title: "Compression on Nginx"
search: false
category:
  - information
  - nginx
last_modified_at: 2023-02-08T23:55:00
---

<br/>

## 0. 들어가면서

리액트(react) 어플리케이션으로 개발한 간단한 서비스를 개발했습니다. 
이때 현장 네트워크 상황이 좋지 않아서 사용자들에게 버그로 인식될 정도였는데, 몇 가지 설정을 통해 이를 개선하였습니다. 
이번 포스트에선 `Nginx` 압축(compression) 관련 설정에 대해 알아보겠습니다. 

## 1. Compression on Nginx 

압축 관련된 설정은 공통적으로 적용하면 좋기 때문에 `http` 블럭 내부에 작성합니다. 
`server`, `location` 블럭 내부에 설정하여도 무관합니다. 

##### nginx.conf

* `http` 블럭은 메인 설정 파일인 `/etc/nginx/nginx.conf`에 정의합니다.
* 다음과 같은 압축 관련 설정들을 작성합니다.
* gzip on;
    * 컨텐츠 압축 사용을 지시합니다.
* gzip_disable "msie6";
    * 압축을 적용하지 않을 브라우저를 지정합니다.
    * 예전 IE(Internet Explorer)는 압축을 지원하지 않으므로 "msie6"를 예외 항목으로 설정합니다.
* gzip_vary on;
    * gzip 설정을 사용할 때 응답 헤더에 `Vary: Accept-Encoding`를 넣을지 여부입니다.
* gzip_proxied any;
    * 프록시(proxy)나 캐시 서버에서 요청할 경우 동작 여부를 설정합니다.
    * 프록시 여부는 `via` 헤더의 존재 여부로 확인합니다.
    * off - 프락시에서 요청할 경우 압축하지 않습니다.
    * expired - 요청 헤더에 `Expires` 가 있고 만료되었을 경우에만 압축합니다.
    * no-cache - 요청 헤더에 `Cache-Control`가 있고 `no-cache`일 경우에만 압축합니다.
    * no-store - 요청 헤더에 `Cache-Control`가 있고 `no-store`일 경우에만 압축합니다.
    * any - 항상 압축합니다. 
* gzip_comp_level 6;
    * 1~9까지 숫자를 설정할 수 있으며 숫자가 클수록 압축률은 높아지지만, 압축 시간이 길어집니다.
* gzip_buffers 16 8k;
    * 버퍼의 숫자와 크기를 지정합니다.
    * 버퍼 숫자는 16, 크기는 8k입니다.
* gzip_http_version 1.1;
    * 최소 HTTP 통신 버전을 설정합니다.
    * 1.1 버전을 설정하였습니다.
* gzip_min_length 1024;
    * 압축을 적용할 컨텐츠(contents)의 최소 사이즈를 지정합니다.
    * 이보다 작은 파일은 압축하지 않습니다.
* gzip_types [types in array];
    * 컨텐츠 유형에 따른 압축 여부를 설정합니다.
    * `text/html`은 기본 값이므로 이를 제외합니다. 
    * 압축할 타입을 MIME(Multipurpose Internet Mail Extensions)으로 작성합니다.

```conf
http {
  charset utf-8;
  default_type application/octet-stream;
  include /etc/nginx/mime.types;
  include /etc/nginx/conf.d/*.conf;

  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_min_length 1024;
  gzip_types text/plain
             text/css
             application/javascript
             application/json
             image/x-icon
             image/png
             image/jpeg
             image/gif;
}
```

## 2. Practice

도커 컨테이너(docker container)로 간단한 서비스를 호스팅하여 압축 결과를 확인해보겠습니다. 

### 2.1. default.conf

* 기본 설정 이 외에도 서버에 관련된 설정을 추가합니다.
* 서버 포트를 `80`으로 지정합니다.
* 서비스 루트 경로와 index 파일을 지정합니다.

```conf
server {
  listen 80;

  location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
  }
}
```

### 2.2. Dockerfile

* `nginx.conf`, `default.conf` 설정을 이미지에 복사합니다.

```dockerfile
FROM node:16-buster-slim as builder

WORKDIR /app

COPY package.json .

RUN npm install --silent

COPY . .

RUN npm run build

FROM nginx

COPY nginx.conf /etc/nginx/nginx.conf

COPY default.conf /etc/nginx/conf.d/default.conf

COPY --from=builder /app/build /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```

### 2.3. Run Docker Container

* 이미지를 빌드하고, 컨테이너를 실행합니다.

```
$ docker build . -t nginx-compression

#1 [internal] load build definition from Dockerfile
#1 sha256:381cf965ab6ee9ccb197c1633e92e38d2dde7d519be9d1c806078c1cf537fe27
#1 transferring dockerfile: 388B 0.0s done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:469fd5d3f6016686c3483360a23956e926131e9ac500fa2e675dcc72da3a1160
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for docker.io/library/nginx:latest
#3 sha256:06c466a4eb6821b81bd3e48610e5f38dab858b1e9acb01d6e2f6b11c8fabe6bc
#3 DONE 4.6s

#4 [internal] load metadata for docker.io/library/node:16-buster-slim
#4 sha256:b70ee1f12b77914e20dd7901e2624dd92a782dcf26287cd167ad9504062843df
#4 DONE 4.7s

#9 [builder 1/6] FROM docker.io/library/node:16-buster-slim@sha256:3e531c9fb23b950711705c18e0c350cfc1f6a4c583883762d52b4096de3c9da8
#9 sha256:bf60be2d6c6a5925d444d0797317dc74d9e68293af3372d03fde09dc50eb1dfe
#9 DONE 0.0s

#5 [stage-1 1/4] FROM docker.io/library/nginx@sha256:aa0afebbb3cfa473099a62c4b32e9b3fb73ed23f2a75a65ce1d4b4f55a5c2ef2
#5 sha256:1fb2382fe76efdba29f7113f4244fb9e465f2a5f43302acab652a44b6b4bcbcd
#5 DONE 0.0s

#6 [internal] load build context
#6 sha256:e1bfbd312a84714efe13b716fb7df4a6718bc6ccc486e9db88a9d8020eab30ae
#6 transferring context: 44.20kB 0.2s
#6 transferring context: 66.17MB 5.2s
#6 transferring context: 72.70MB 10.3s
#6 transferring context: 97.86MB 15.3s
#6 transferring context: 110.87MB 20.4s
#6 transferring context: 118.13MB 25.4s
#6 transferring context: 119.10MB 30.4s
#6 transferring context: 120.09MB 35.4s
#6 transferring context: 123.75MB 40.5s
#6 transferring context: 139.21MB 45.6s
#6 transferring context: 150.11MB 50.7s
#6 transferring context: 164.50MB 55.7s
#6 transferring context: 173.88MB 60.8s
#6 transferring context: 188.22MB 65.8s
#6 transferring context: 257.03MB 70.9s
#6 transferring context: 288.89MB 75.9s
#6 transferring context: 298.82MB 77.7s done
#6 DONE 77.8s

#5 [stage-1 1/4] FROM docker.io/library/nginx@sha256:aa0afebbb3cfa473099a62c4b32e9b3fb73ed23f2a75a65ce1d4b4f55a5c2ef2
#5 sha256:1fb2382fe76efdba29f7113f4244fb9e465f2a5f43302acab652a44b6b4bcbcd
#5 CACHED

#11 [builder 3/6] COPY package.json .
#11 sha256:805498f1e4e1e5ed999edfee51a8010327435bad41481ecddbb48123f1e2cf28
#11 CACHED

#10 [builder 2/6] WORKDIR /app
#10 sha256:0ffc7f60f21e27a91db62b956a782eb5b5d1310482ccdcef22f7a29aa7d83f80
#10 CACHED

#12 [builder 4/6] RUN npm install --silent
#12 sha256:d096f0a79b1452899bab350ba9ccecf4c04cc15b3dea3c0ee19845ca302902f7
#12 CACHED

#7 [stage-1 2/4] COPY nginx.conf /etc/nginx/nginx.conf
#7 sha256:cbf5cf5a81531b52c3d21b7eb2ca2227696c8ac28b6e4e1fd386c38ef5cf3911
#7 DONE 0.4s

#8 [stage-1 3/4] COPY default.conf /etc/nginx/conf.d/default.conf
#8 sha256:713b84d951b87add00c285e06a601bc77833c08de4366edadfa0f94a95459a78
#8 DONE 0.1s

#13 [builder 5/6] COPY . .
#13 sha256:2d8e13fabf28b2494a7db80a1375d70b7d9cf78330ab98e838e2c287105c91c1
#13 DONE 14.5s

#14 [builder 6/6] RUN npm run build
#14 sha256:77a20b6285b2020a8b23b70d595052bf71247a8065fc7298bf05516b59c41220
#14 0.967
#14 0.967 > action-in-blog@0.1.0 build
#14 0.967 > react-scripts build
#14 0.967
#14 3.289 Creating an optimized production build...
#14 10.60 Compiled with warnings.
#14 10.60
#14 10.60 [eslint]
#14 10.60 src/App.tsx
#14 10.60   Line 16:25:  Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop  jsx-a11y/img-redundant-alt
#14 10.60
#14 10.60 Search for the keywords to learn more about each warning.
#14 10.60 To ignore, add // eslint-disable-next-line to the line before.
#14 10.60
#14 10.60 File sizes after gzip:
#14 10.60
#14 10.61   46.5 kB (-49 B)  build/static/js/main.44f5722a.js
#14 10.61   1.79 kB          build/static/js/787.4d6a8c04.chunk.js
#14 10.61   416 B            build/static/css/main.423087cb.css
#14 10.61
#14 10.61 The project was built assuming it is hosted at /.
#14 10.61 You can control this with the homepage field in your package.json.
#14 10.61
#14 10.61 The build folder is ready to be deployed.
#14 10.61 You may serve it with a static server:
#14 10.61
#14 10.61   npm install -g serve
#14 10.61   serve -s build
#14 10.61
#14 10.61 Find out more about deployment here:
#14 10.61
#14 10.61   https://cra.link/deployment
#14 10.61
#14 DONE 10.7s

#15 [stage-1 4/4] COPY --from=builder /app/build /usr/share/nginx/html
#15 sha256:2b2c01574c9243095f4998a354ae1924a60c9541019fff477fe076dc38cffcbd
#15 DONE 0.1s

#16 exporting to image
#16 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#16 exporting layers 0.1s done
#16 writing image sha256:cc84ce023fe5d1245bdafc39bd2c051a5bf6e1170e246118dc33d4c9744ec278
#16 writing image sha256:cc84ce023fe5d1245bdafc39bd2c051a5bf6e1170e246118dc33d4c9744ec278 done
#16 naming to docker.io/library/nginx-compression done
#16 DONE 0.1s
Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them

$ docker stop nginx-compression && docker rm nginx-compression
nginx-compression
nginx-compression

$ docker run -d -p 80:80 --name nginx-compression nginx-compression
f3ea887b055e56e34edbc0af987365e53e06d44329fd802b37d0cab9005f17f2
```

### 2.4. Result of Compression on Nginx

압축 적용 전후를 비교해보겠습니다. 
테스트 환경은 다음과 같습니다.

* 크롬 브라우저
* `빠른 3G` 네트워크 환경
* 캐시 사용 중지

##### Without Compression

<p align="center">
    <img src="/images/compression-on-nginx-1.gif" width="100%" class="image__border">
</p>

##### With Compression

<p align="center">
    <img src="/images/compression-on-nginx-2.gif" width="100%" class="image__border">
</p>

## 3. Consideration



#### TEST CODE REPOSITORY

* <https://github.com/Junhyunny/blog-in-action/tree/master/2023-03-20-compression-on-nginx>

#### REFERENCE

* <https://nginx.org/en/docs/http/ngx_http_gzip_module.html>
* <https://docs.nginx.com/nginx/admin-guide/web-server/compression/>
* <https://www.lesstif.com/system-admin/nginx-gzip-59343019.html>
* <https://twpower.github.io/48-set-up-gzip-in-nginx>
* <https://stackoverflow.com/questions/7848796/what-does-varyaccept-encoding-mean>
* <https://aimaster.tistory.com/11>
* <https://blog.lael.be/post/6553>
* <https://yangbongsoo.tistory.com/4>