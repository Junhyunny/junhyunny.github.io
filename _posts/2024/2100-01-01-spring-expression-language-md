---
title: "Post Format"
search: false
category:
  - post-format
last_modified_at: 2100-01-01T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

## 0. 들어가면서

What is SpEL 
ChatGPT

SpEL stands for Spring Expression Language. It is a powerful expression language that is part of the Spring Framework, used primarily for querying and manipulating an object graph at runtime. SpEL is similar to other expression languages like Unified EL (used in JSP and JSF) but is more powerful and flexible. Here are some key features and uses of SpEL:

    Syntax and Features:
        Literal expressions: e.g., "Hello World", 100.
        Properties, arrays, lists, and maps: Access properties, arrays, lists, and maps using simple syntax.
        Method invocation: Call methods on objects, e.g., person.getName().
        Operators: Supports relational, logical, and arithmetic operators, e.g., name == 'John', age > 18.
        Regular expressions: Use regular expressions for pattern matching, e.g., name matches '^[A-Za-z]*$'.
        Ternary operator: Supports ternary conditional operator, e.g., age > 18 ? 'Adult' : 'Minor'.
        Collection selection: Powerful querying and filtering of collections, e.g., people.?[age > 18].

    Integration with Spring:
        Configuration: Used in Spring configuration files for defining bean properties.
        Spring Data JPA: Used in Spring Data JPA queries.
        Spring Security: Used in Spring Security expressions.
        Spring MVC: Used in Spring MVC annotations like @RequestMapping.

    Use Cases:
        Dynamic bean wiring: Configure beans dynamically based on expression evaluations.
        Conditional validation: Apply validation rules conditionally based on evaluated expressions.
        Access control: Control access to methods or resources based on evaluated security expressions.
        Template processing: Used in templating engines to dynamically generate content.

Example Usage

Here is a simple example demonstrating how SpEL can be used:

java

ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello World'.concat('!')");
String message = (String) exp.getValue();
System.out.println(message);  // Outputs 'Hello World!'

In a Spring configuration file, SpEL can be used as follows:

xml

<bean id="exampleBean" class="com.example.ExampleBean">
    <property name="message" value="#{'Hello ' + 'World!'}" />
</bean>

Advantages

    Flexibility: Allows for dynamic expression evaluation.
    Integration: Deep integration with the Spring framework.
    Powerful Querying: Provides advanced querying capabilities for collections.

SpEL is a versatile and powerful tool within the Spring ecosystem, enhancing the framework's ability to handle dynamic content and configurations effectively.
What is the meaning of "querying and manipulating an object graph at runtime"?
ChatGPT

"Querying and manipulating an object graph at runtime" refers to the ability to dynamically access, modify, and interact with objects and their relationships during the execution of a program, rather than at compile time. This capability is particularly useful in scenarios where the structure or the data within objects is not known until the program is running. Here's a detailed breakdown of what this entails:
Querying an Object Graph

Querying involves accessing and retrieving data from an object graph based on certain criteria. An object graph is a network of objects connected through their references. Querying might include:

    Accessing Properties: Retrieving the value of an object's attribute.

    java

ExpressionParser parser = new SpelExpressionParser();
Person person = new Person("John", 25);
Expression exp = parser.parseExpression("name");
String name = (String) exp.getValue(person);
System.out.println(name);  // Outputs 'John'

Filtering Collections: Extracting elements from a collection that meet specific conditions.

java

    List<Person> people = Arrays.asList(new Person("John", 25), new Person("Jane", 30));
    Expression exp = parser.parseExpression("#root.?[age > 25]");
    List<Person> filteredPeople = (List<Person>) exp.getValue(people);
    System.out.println(filteredPeople.size());  // Outputs '1' (only Jane)

Manipulating an Object Graph

Manipulating involves changing the structure or data within an object graph. This can include:

    Setting Properties: Changing the value of an object's attribute.

    java

ExpressionParser parser = new SpelExpressionParser();
Person person = new Person("John", 25);
Expression exp = parser.parseExpression("name");
exp.setValue(person, "Jane");
System.out.println(person.getName());  // Outputs 'Jane'

Adding/Removing Elements: Modifying collections by adding or removing elements.

java

    List<Person> people = new ArrayList<>(Arrays.asList(new Person("John", 25)));
    Expression exp = parser.parseExpression("#root.add(new com.example.Person('Jane', 30))");
    exp.getValue(people);
    System.out.println(people.size());  // Outputs '2' (John and Jane)

Runtime Evaluation

The term runtime indicates that these queries and manipulations occur while the program is running, as opposed to compile time when the program code is being translated into executable code. This provides flexibility because:

    Dynamic Behavior: Decisions and changes can be made based on conditions that are only known during execution.
    Configuration: Applications can be configured or reconfigured without recompiling code.
    Data-Driven: Operations can be driven by data inputs, user interactions, or other runtime factors.

Example in Spring Configuration

In Spring, SpEL expressions can be used in configuration files to dynamically set properties based on runtime data:

xml

<bean id="exampleBean" class="com.example.ExampleBean">
    <property name="dynamicValue" value="#{systemProperties['user.name']}" />
</bean>

In this example, the dynamicValue property is set to the current user's name from the system properties at runtime.
Benefits

    Flexibility: Adapt to changing conditions and requirements without modifying and recompiling code.
    Powerful Querying: Perform complex queries on object graphs to retrieve and manipulate data.
    Integration: Seamlessly integrates with frameworks like Spring for enhanced functionality and ease of use.

In summary, querying and manipulating an object graph at runtime with SpEL allows developers to write more flexible, dynamic, and data-driven applications.


## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE
