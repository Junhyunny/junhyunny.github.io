---
title: "Github Actions Basic"
search: false
category:
  - information
  - github
  - dev-ops
last_modified_at: 2024-02-18T23:55:00
---

<br/>

## RECOMMEND POSTS BEFORE THIS

- [What is CI/CD?][what-is-ci-cd-link]

## 0. 들어가면서

최근 고객사 MVP(minimum viable product) 릴리즈 일정이 다가오면서 운영 환경을 위한 CI/CD 파이프라인 구축이 필요했다. 현재 프로젝트 상황을 고려했을 때 `깃허브 액션스(Github Actions)`가 가장 최선의 선택이라고 생각됬다. 

- 고객사는 깃허브(github) 엔터프라이즈를 사용하고 있다.
- CI/CD 파이프라인 구축을 위한 리소스를 별도로 할당 받을 수 없다.
- 제조 회사 특성상 격리된 네트워크 내부 서버에 애플리케이션을 배포할 이미지를 준비하면 된다.

이번 포스트는 깃허브 액션스로 파이프라인을 구축하기 위한 기본 개념들에 대해 정리했다. 

## 1. Github Actions

공식 홈페이지에서는 깃허브 액션스를 다음과 같이 설명한다.

> GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline.

애플리케이션 빌드, 테스트, 배포를 자동으로 수행할 수 있는 CI/CD 파이프라인 플랫폼이다. CI/CD 파이프라인 외에도 다른 작업들을 할 수 있다고 소개한다. 예를 들면 레포지토리에 새로운 이슈를 만들었을 때 적절한 라벨을 붙히는 작업도 깃허브 액션스를 통해 자동화할 수 있다고 한다. 

## 2. Components of Github Actions

깃허브 액션스를 구성하는 컴포넌트들에 대해서 알아보자. 각 컴포넌트가 어떤 역할을 수행하는지 파악하면 좀 더 쉽게 파이프라인을 구축할 수 있다. 

### 2.1. Workflows

워크플로우(workflow)는 자동화 된 프로세스를 의미한다. 위에서도 언급했지만, 자동화 된 프로세스는 CI/CD 파이프라인 외에도 레포지토리를 관리할 때 필요한 작업들을 자동으로 수행한다는 의미이다. 자동화 작업이 필요한 레포지토리 `/.github/workflows` 폴더에 워크플로우 흐름을 정의한 yml 파일을 기준으로 동작한다. 

워크플로우는 다음과 같은 요소들로 구성되어 있다. 각 구성 요소들이 무엇인지 살펴보자.

- 이벤트(event)
- 잡(job)
- 스텝(step)

<p align="center">
  <img src="/images/posts/2024/overview-actions-simple-01.png" width="100%" class="image__border">
</p>
<center>https://docs.github.com/ko/actions/learn-github-actions/understanding-github-actions</center>

### 2.2. Events




### 2.3. Jobs

깃허브는 워크플로우가 동작하는 환경은 리눅스(linux), 윈도우즈(windows) 그리고 맥OS(macOS)을 제공한다. 

### 2.4. Steps

### 2.5. Actions

## 3. 




현재 상황에서 가


## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

- [GitLab CI/CD Pipeline for On-Premise][gitlab-ci-cd-pipeline-link]
- [Optimize Gitlab CI Pipeline for Maven Project][optimize-gitlab-ci-pipeline-link]

#### REFERENCE

- <https://docs.github.com/ko/actions>
- <https://docs.github.com/ko/actions/learn-github-actions/understanding-github-actions>

[what-is-ci-cd-link]: https://junhyunny.github.io/information/what-is-ci-cd/
[gitlab-ci-cd-pipeline-link]: https://junhyunny.github.io/information/dev-ops/gitlab-ci-cd-pipeline-for-on-premise/
[optimize-gitlab-ci-pipeline-link]: https://junhyunny.github.io/gitlab-ci/maven/spring-boot/optimize-gitlab-ci-pipeline-for-maven-project/
