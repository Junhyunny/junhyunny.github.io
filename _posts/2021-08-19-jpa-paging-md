---
title: "JPA 페이징(paging) 처리"
search: false
category:
  - spring-boot
  - jpa
  - junit
last_modified_at: 2021-08-20T03:00:00
---

<br>

JPA를 사용하면서 정말 편해졌다고 느낀 이유 중 한가지가 페이징(paging) 처리 방법입니다. 
간단한 예제 코드를 통해 사용 방법에 대해 알아보겠습니다. 
예제 코드를 만나보기 전에 페이징 처리에 사용되는 인터페이스와 클래스를 살펴보겠습니다. 

## Pageable 인터페이스
예제 코드에서 확인할 수 있겠지만, `Pageable` 인터페이스 구현체를 JpaRepository 메소드에 파라미터로 넘겨주기만 하면 자동으로 페이징 처리가 됩니다.  
개발자가 `Pageable` 인터페이스를 직접 조작하는 일은 별로 없겠지만 어떤 기능을 제공하는지는 확인해보겠습니다. 

`Pageable` 인터페이스에 대한 기능을 간단하게 요약하면 다음과 같습니다.
- JPA 가 페이징 처리를 위해 필요한 기능들을 명세하고 있습니다.
- getPageNumber 메소드 - 현재 페이지 번호를 반환
- getPageSize 메소드 - 한 페이지에서 보여줄 항목들의 개수를 반환
- getOffset 메소드 - 페이지 크기에 따라 취할 오프셋을 반환
- next 메소드 - 다음 페이지를 조회할 때 사용하는 `Pageable` 인터페이스를 반환
- first 메소드 - 첫번째 페이지를 조회할 때 사용하는 `Pageable` 인터페이스를 반환
- previousOrFirst 메소드 - 이전 페이지를 조회할 때 사용하는 `Pageable` 인터페이스를 반환, 가장 첫 페이지인 경우에는 첫 페이지를 위한 `Pageable` 인터페이스를 반환

### Pageable 인터페이스 구조

```java
public interface Pageable {

    // ... 

    int getPageNumber();

    int getPageSize();

    long getOffset();

    Pageable next();

    Pageable previousOrFirst();

    Pageable first();
}
```

## PageRequest 클래스
위에서도 언급했듯이 페이징 처리를 할 수 있도록 Pageable 인터페이스를 구현한 객체를 JpaRepository에게 전달해야 합니다. 
Spring 프레임워크에서는 Pageable 인터페이스 구현체를 쉽게 생성할 수 있도록 `PageRequest` 클래스를 제공합니다. 
간단한 예제 코드를 통해 직관적으로 이해해보겠습니다.  

### PageRequest 클래스 of 메소드
- of 메소드에 들어간 파라미터를 이해하기 쉽게 문장으로 풀어서 설명하면 다음과 같습니다.
    - Sort.by(Direction.DESC, "createdAt") - "createdAt 필드 값으로 정렬한 항목(row)들을"
    - 100 - "100개씩 하나의 페이지로 만들었을 때"
    - 0 - "0번째 페이지를"
    - "조회할 수 있는 Pageable 구현체를 만들어줘"
    
```java
    Pageable pageable = PageRequest.of(0, 100, Sort.by(Direction.DESC, "createdAt"));
```

## Page<T> 클래스
페이징 처리가 되어 반환되는 결과는 `Page<T>` 클래스에 담겨 반환됩니다. 
`Page<T>` 클래스는 다음과 같은 정보를 지니고 있습니다. 
- getPageable 메소드 - 페이징 처리에서 사용한 Pageable 인터페이스 구현체 정보
- getContent 메소드 - 해당 페이지에 해당되는 항목(row) 리스트
- getTotalElements 메소드 - 조회 조건에 일치하는 총 항목 수
- getTotalPages 메소드 - 총 페이지 개수

PageRequest 클래스 of 메소드를 통해 얻은 Pageable 구현체를 이용한 코드를 살펴보겠습니다. 
JapRepository에서 기본적으로 제공하는 findAll 메소드를 사용하였습니다. 

```java
    Pageable pageable = PageRequest.of(0, 10, Sort.by(Direction.DESC, "createdAt"));
    Page<TestEntity> testEntities = testRepository.findAll(pageable);
```

## 테스트 코드
간단한 테스트 코드를 통해 활용 방법을 알아보겠습니다. 
세 가지 방법으로 구현하였습니다. 
- JpaRepository 메소드 이름 규칙을 활용한 findBy- 메소드 사용
- @Query 애너테이션 with JPQL
- @Query 애너테이션 with Native Query

### findBy- 메소드 사용

### @Query 애너테이션 사용

#### JPQL 사용

#### Native Query 사용

## OPINION
오늘 주제와는 맞지 않아서 MyBatis 페이징 처리에 대해 언급하진 않았습니다. 
다음 기회에 MyBatis에서 사용하는 페이징 처리 예제 코드를 정리하면서 JPA 페이징 처리 방법과 비교해보겠습니다. 

#### TEST CODE REPOSITORY
- <https://github.com/Junhyunny/blog-in-action>

#### REFERENCE
- <>