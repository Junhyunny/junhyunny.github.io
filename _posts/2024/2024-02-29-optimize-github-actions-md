---
title: "Optimize Github Actions"
search: false
category:
  - information
  - github
  - dev-ops
last_modified_at: 2024-02-29T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

- [Github Actions Example][github-actions-example-link]

## 0. 들어가면서

[Github Actions Example][github-actions-example-link]에서 간단한 파이프라인을 구성하는 방법에 대해 다뤘다. 이번 글은 파이프라인을 최적화하는 방법에 대해 정리했다. 

## 1. Cache Action in Github Actions

CI/CD 파이프라인을 여러번 구축해보니 가장 시간을 많이 차지하는 작업은 필요한 의존성들을 다운로드 받는 것이다. 젠킨스(jenkins)나 깃랩(gitlab)에서 파이프라인을 구축할 때도 다운로드 받은 의존성을 재사용해서 빌드 시간을 줄이는 방법들이 존재한다. 깃허브 액션스에도 마찬가지로 의존성 재사용을 통한 파이프라인 시간을 단축하는 방법이 있다. 

캐시 액션(cache action)라는 액션을 사용하면 다운로드 의존성을 재사용할 수 있다. 공식 문서에서 다음과 같은 설명을 볼 수 있다.

> To make your workflows faster and more efficient, you can create and use caches for dependencies and other commonly reused files.

워크플로우(workflow)의 작업(job)이 동작하는 러너(runner) 환경은 항상 깨끗한 이미지이기 때문에 매번 필요한 의존성들을 다운로드 받는다. 네트워크 사용량이 늘어나고 빌드 시간이 길어지고 비용도 늘어나게 된다. 캐시 액션을 사용하면 자주 사용하는 의존성 파일들을 재사용할 수 있다. 간단하게 사용 방법을 알아보자.

- key 
  - 필수 값으로 캐시를 저장하거나 재사용하기 위해 찾을 때 사용한다. 
  - 변수, 컨텍스트 값, 정적 문자열, 함수들을 사용해 만들 수 있다.
  - 최대 문자 길이는 512 이며 최대 길이를 넘어가는 경우 액션이 실패한다.
- path
  - 필수 값으로 러너에서 캐시가 필요한 경로를 의미한다.

```yml
name: Caching with npm
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Test
        run: npm test
```

공식 문서를 살펴보면 `setup-*` 액션을 사용하면 직접 캐시 액션을 사용하지 않아도 캐시를 적용할 수 있는 방법이 소개되어 있다. 많은 캐시 액션 예제 글들이 직접 의존성 파일들을 캐싱하지만, `setup-*` 액션에 포함된 캐시 기능을 사용할 생각이다. 다음과 같은 `setup-*` 액션들을 지원한다.

<p align="center">
  <img src="/images/posts/2024/optimize-github-actions-01.png" width="80%" class="image__border">
</p>
<center>https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows</center>

## 2. Gradle Caching




필자의 경우 

캐시 액션을 사용해 파이프라인을 최적화하는 글들을 살펴보면 액션을 직접 사용한다. 필자의 경우 setup-java, setup-

 글들을 살펴보면 





캐시 액션을 사용하면 의존성들 뿐만 아니라 재사용되는 모든 파일들을 캐시에 보관해 워크플로우(workflow) 속도를 개선할 수 있다. 캐시 액션의 특징을 살펴보자.

- 

## 1. Gradle Caching

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

- <https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows>

[github-actions-example-link]: https://junhyunny.github.io/information/github/dev-ops/github-actions-example/