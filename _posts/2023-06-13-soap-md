---
title: "SOAP(Simple Object Access Protocol)"
search: false
category:
  - information
  - java
last_modified_at: 2023-06-13T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

## 0. 들어가면서

조만간 레거시 시스템과 신규 시스템의 프로토콜(protocol)을 연결하는 서비스 구축을 할 것 같습니다. 
말로만 듣던 `SOAP(Simple Object Access Protocol)`을 사용하는 어플리케이션과 협력할 것 같습니다. 
단순하게 생각한 것과 달리 굉장히 복잡한 프로토콜이어서 놀랐습니다. 

> HTTP를 통해 XML 기반의 메세지를 사용해 통신한다. 

맞는 말이지만, 심플(simple)하진 않은 이 프로토콜에 대해 포스트로 정리하였습니다. 

## 1. SOAP(Simple Object Access Protocol)

> `SOAP`은 일반적으로 널리 알려진 HTTP, HTTPS, SMTP 등을 통해 XML 기반의 메시지를 컴퓨터 네트워크 상에서 교환하는 프로토콜이다.

`SOAP`은 웹 서비스(WS, Web Service)에서 메세지를 전달하는 기반이 되는 프로토콜입니다. 
여기서 말하는 웹 서비스는 월드 와이드 웹(WWW, World Wide Web)을 통해 서비스하는 것이 아닙니다. 
서비스 지향적 분산 컴퓨팅 기술의 일종으로 네트워크 상에서 서로 다른 종류의 컴퓨터들 간에 통신을 위한 소프트웨어 시스템입니다. 

다음과 같이 정리할 수 있습니다.

* 웹 서비스 기술은 HTTP 같은 어플리케이션 계층 프로토콜을 통해 XML이나 JSON 같은 메세지 형식으로 데이터를 주고 받는 기술입니다.
* 대표적으로 다음과 같은 기술들이 있습니다.
    * AJAX(Asynchronous JavaScript And XML) since 1999
    * REST(Representational State Transfer) since 2000
    * SOAP since 1998

### 1.1. Benefits of SOAP

많은 글들에서 `SOAP`의 장점을 설명하는데 필자에게는 공감이 잘 안 됬습니다. 
요즘엔 너무 당연한 특징들이지만, 1990년도 초반부터 사용한 원격 통신 방식인 CORBA, DCOM, RMI과 비교했을 때 주된 차이점들입니다. 

* 

### 1.2. SOAP Message Format

#### 1.2.1. Request

```xml

```

```json

```

#### 1.2.2. Response

```xml

```

```json

```

## 2. Web Service Protocol Stack

다음과 같은 아키텍처를 구성합니다. 

## 3. SOAP Architecture



## 4. Practice



## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

* <https://en.wikipedia.org/wiki/SOAP>
* <https://ko.wikipedia.org/wiki/SOAP>
* <https://en.wikipedia.org/wiki/Web_service>
* <https://en.wikipedia.org/wiki/Web_services_protocol_stack>
* <https://www.baeldung.com/spring-boot-soap-web-service>