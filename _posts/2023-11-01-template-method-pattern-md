---
title: "Template Method pattern"
search: false
category:
  - java
  - design-pattern
last_modified_at: 2023-11-01T23:55:00
---

<br/>

## 1. Template Method Pattern

> 객체의 연산에는 알고리즘의 뼈대만을 정의하고 각 단계에서 수행할 구체적 처리는 서브 클래스 쪽으로 미룹니다. 알고리즘의 구조 자체는 그대로 놔둔 채 알고리즘 각 단계 처리를 서브 클래스에서 재정의할 수 있게 합니다.

코드 재사용을 위한 기본 기술

훅 연산(hook operation) 기본적으로 아무 내용도 존재하지 않음. 필요에 따라 서브 클래스에서 기능을 확장할 수 있도록 기본 행동을 제공하는 연산. 템플릿 메소드 패턴에선 어떤 연산이 훅 연산인지 추상 연산인지 확인하는 것이 중요. 훅 연산은 나중에 재정의할 수도 있고, 재정의하지 않을 수도 있는 연산. 추상 연산은 반드시 재정의해야하는 연산. 서브 클래스를 작성하는 개발자는 어떤 연산들이 오버라이드용으로 설계되었는지를 이해하고 있어야 한다.

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

* [Design Patterns: Elements of Reusable Object Oriented Software][design-pattern-book-link]
* <https://refactoring.guru/ko/design-patterns/template-method>
* <https://engineering.linecorp.com/ko/blog/templete-method-pattern>
* <https://gmlwjd9405.github.io/2018/07/13/template-method-pattern.html>
* <https://coding-factory.tistory.com/712>

[design-pattern-book-link]: https://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9791195444953