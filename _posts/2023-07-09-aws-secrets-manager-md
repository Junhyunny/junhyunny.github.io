---
title: "AWS Secrets Manager with Spring Boot"
search: false
category:
  - java
  - spring-boot
  - amazon-web-service
last_modified_at: 2023-07-09T23:55:00
---

<br/>

## 1. AWS Secrets Manager

데이터베이스 인증서, API 키, 토큰 등 IT 리소스(resource) 접근에 필요한 보안 암호를 보호, 관리하는 AWS 컴포넌트입니다. 

* 보안 암호를 대규모로 관리, 교체, 검색할 수 있다.
* 보안 암호의 수명 주기를 관리한다.
* 다른 AWS 서비스와 통합하여 모니터링을 자동화한다.
* 내부 보안 또는 규정 요건을 충족하지 않는 암호를 빠르게 찾아낼 수 있다.
* 보안 암호 복제 기능으로 여러 지역의 어플리케이션과 재해 복구 상황을 지원한다.
* 어플리케이션에서 필요한 설정 값들을 프로파일(profile) 단위로 관리할 수 있습니다. 
    * 서비스가 배포되는 환경 별로 다른 설정 값을 사용할 수 있습니다.

## 2. AWS Secrets Manager Config in Spring Cloud

스프링 클라우드(spring cloud)는 AWS Scretes Manager을 쉽게 사용할 수 있도록 의존성(dependency)를 제공합니다. 

* 아래 의존성들을 추가합니다. 
* 아래 의존성들이 추가되면 어플리케이션 실행 시점에 `Secrets Manager`에서 필요한 설정 값들을 읽습니다.
    * bootstrap.yml 파일에 별도 설정이 추가되어야 합니다.

```xml
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-bootstrap</artifactId>
        <version>4.0.3</version>
    </dependency>
    <dependency>
        <groupId>io.awspring.cloud</groupId>
        <artifactId>spring-cloud-starter-aws-secrets-manager-config</artifactId>
        <version>2.4.4</version>
    </dependency>
```

## 3. Practice

`Secrets Manager`에 간단한 프로퍼티를 설정하고 어플리케이션에서 주입 받는 예제를 살펴보겠습니다. 

### 3.1. Setup Secrets

AWS 콘솔의 `Secrets Manager`에서 다음과 같은 과정을 통해 설정들을 추가합니다.

* `Store a new secret` 버튼을 클릭합니다.

<p align="center">
    <img src="/images/aws-secrets-manager-1.JPG" width="80%" class="image__border image__padding">
</p>


### 3.2. Configuration Injection


```
2023-07-09T23:32:41.702+09:00  INFO 20762 --- [           main] i.a.c.s.AwsSecretsManagerPropertySources : Loading secrets from AWS Secret Manager secret with name: /secret/action-in-blog, optional: false
2023-07-09T23:32:41.716+09:00 ERROR 20762 --- [           main] o.s.boot.SpringApplication               : Application run failed

io.awspring.cloud.secretsmanager.AwsSecretsManagerPropertySources$AwsSecretsManagerPropertySourceNotFoundException: com.amazonaws.services.secretsmanager.model.AWSSecretsManagerException: The security token included in the request is expired (Service: AWSSecretsManager; Status Code: 400; Error Code: ExpiredTokenException; Request ID: fc9389d1-fc38-45bf-97e0-e368ba679a31; Proxy: null)
	at io.awspring.cloud.secretsmanager.AwsSecretsManagerPropertySources.createPropertySource(AwsSecretsManagerPropertySources.java:93) ~[spring-cloud-aws-secrets-manager-config-2.4.4.jar:2.4.4]
	at io.awspring.cloud.secretsmanager.AwsSecretsManagerPropertySourceLocator.locate(AwsSecretsManagerPropertySourceLocator.java:94) ~[spring-cloud-aws-secrets-manager-config-2.4.4.jar:2.4.4]
	at org.springframework.cloud.bootstrap.config.PropertySourceLocator.locateCollection(PropertySourceLocator.java:50) ~[spring-cloud-context-4.0.3.jar:4.0.3]
	at org.springframework.cloud.bootstrap.config.PropertySourceLocator.locateCollection(PropertySourceLocator.java:46) ~[spring-cloud-context-4.0.3.jar:4.0.3]
```

```
$ aws configure
AWS Access Key ID [****************S5FG]: ${YOUR_AWS_CLIENT_ID}
AWS Secret Access Key [****************KtFb]: {YOUR_AWS_CLIENT_SECRET}
Default region name [us-east-1]: 
Default output format [None]: 

$ aws configure set aws_session_token ${YOUR_AWS_SESSION_TOKEN}
```



## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

* <https://aws.amazon.com/ko/secrets-manager/features/>
* <https://docs.aws.amazon.com/ko_kr/secretsmanager/latest/userguide/intro.html>
* <https://www.baeldung.com/spring-boot-integrate-aws-secrets-manager>
* <https://devocean.sk.com/blog/techBoardDetail.do?ID=164482>
* [[Spring Boot] AWS Secret Manager를 이용하여 프로퍼티를 관리하자](https://velog.io/@korea3611/Spring-Boot-AWS-Secret-Manager%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EC%9E%90)