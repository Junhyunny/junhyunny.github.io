---
title: "How to use EntityManager thread-safely?"
search: false
category:
  - spring-boot
  - jpa
last_modified_at: 2022-12-17T23:55:00
---

<br>

#### RECOMMEND POSTS BEFORE THIS

- [PersistenceContext and Entity Lifecycle][jpa-persistence-context-link]
- [Features of EntityManager][persistence-context-advantages-link]

## 0. 들어가면서

`엔티티 매니저(EntityManager)`는 스레드 안전(thread safety)하지 않습니다.
내부 영속성 컨텍스트(persistence context)에 1차 캐시를 관리하기 때문에 하나의 엔티티 매니저에 다중 스레드가 접근하면 동시성 문제가 발생할 수 있습니다.
동시성 문제를 해결하려면 각 스레드 별로 고유한 엔티티 매니저를 사용해야합니다.
이번 포스트에선 스레드 안전하게 엔티티를 사용하는 방법에 대해 알아보겠습니다.

## 1. EntityManagerFactory

스레드에 안전하지 않은 엔티티 매니저를 필요에 따라 만들 수 있는
엔티티 매니저가 필요한 시점에

## 2. @PersistenceContext

트랜잭션 처리 @Transactional 애너테이션으로 사용 가능

## 3. Dependency Injection

### 3.1. @Autowired

### 3.2. Contstructor Injection

## 4. Dependency Injection for EntityManager in Spring

ExtendedEntityManagerCreator
SharedEntityManagerCreator

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

- <https://stackoverflow.com/questions/74724044/thread-safety-of-entitymanager-when-dependency-injection>

[jpa-persistence-context-link]: https://junhyunny.github.io/spring-boot/jpa/junit/jpa-persistence-context/
[persistence-context-advantages-link]: https://junhyunny.github.io/spring-boot/jpa/junit/persistence-context-advantages/
