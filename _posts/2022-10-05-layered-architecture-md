---
title: "Layered Architecture"
search: false
category:
  - architecture
  - pattern
last_modified_at: 2022-10-04T23:55:00
---

<br>

## 0. 들어가면서

레이어 아키텍처(layered arhcitecture)는 학원에서 배우는 초급자부터 현장의 개발자들까지 많은 곳에서 사용되고, 널리 알려져있는 아키텍처 패턴입니다. 
익숙한만큼 쉽게 생각되지만, 어플리케이션이 커져감에 따라 레이어 아키텍처는 본연의 목적을 잃고 제 역할을 하지 못하는 경우가 발생합니다. 
레이어 아키텍처를 적용하여 얻고자하는 목표를 이해하고, 아키텍처 사상이 흔들리지 않도록 고려해야하는 원칙들은 무엇이 있는지 알아보겠습니다. 

## 1. Layered Architecture

이름처럼 계층 구조를 지닌 아키텍처입니다. 
구성되는 계층에 따라 N-계층 아키텍처라고 불립니다. 
비교적 단순한 어플리케이션은 3계층, 일반적으로 4계층을 가집니다. 

레이어 아키텍처를 적용하는 가장 큰 이유는 `관심사의 분리`입니다. 
각 계층 별로 책임을 부여하고, 맡은 역할만 수행합니다. 
하나의 계층이 모든 일을 처리할 수 없으므로 자신이 수행할 수 없는 일은 하위 계층에 의존하도록 시스템을 구성합니다. 
의존성의 방향은 중요합니다. 
상위 계층이 하위 계층에 의존하는 것은 가능하지만, 하위 계층은 상위 계층에 대한 어떤 지식이나 정보가 없어야 합니다. 

레이어 아키텍처를 통해 다음과 같은 목적을 이룰 수 있습니다.

* 서로 다른 계층으로 분리하여 전체적인 시스템 결합도를 낮춥니다.
    * 하위 계층은 인터페이스를 통해 접근하고, 실 구현 코드를 직접 사용하지 않습니다.
    * 각 계층을 모듈(module)로 관리하는 경우 배포 사이클을 각자 다르게 가질 수 있습니다.
* 재사용성을 높입니다.
    * 뷰(view)를 표현을 위한 조인 쿼리는 조회 로직의 재사용성을 낮춥니다.
    * 화면 설계가 인프라스트럭처 계층까지 침투한 것으로 화면이 변경될 때마다 쿼리가 함께 변경되어야 합니다.
    * 재사용성의 트레이드 오프(trade-off)가 적절한 수준의 쿼리를 작성하고, 도메인 객체들을 통해 화면에 필요한 데이터를 만듭니다.
* 유지 보수성을 높입니다.
    * 각 계층은 격리되도록 설계합니다.
    * 하위 계층의 의존성이 필요한 경우 인터페이스를 사용하여 변경의 여파가 전파되지 않도록 만듭니다.

### 1.1. 4-Layered Architecture

참고한 자료마다 계층의 이름이나 계층의 개수가 다르지만, 본질적으론 같은 내용이므로 하나를 예시로 설명하겠습니다. 
다음은 각 계층 별로 맡은 책임과 해야하는 일에 대한 내용입니다. 

* 사용자 인터페이스 계층(User Interface Layer)
    * 사용자 화면을 구성하는 것이 주 관심사입니다.
    * 이 계층의 객체들은 비즈니스 로직이 어떻게 수행되는지, 데이터는 어디에서 오는 것인지 알고 싶지 않습니다.
    * `Spring` 프레임워크에선 `View`, `RestController` 클래스들이 선언된 계층입니다.
* 어플리케이션 계층(Application Layer)
    * 
    * 어플리케이션의 흐름을 관리합니다. 
* 도메인 계층(Domain Layer)
    * 핵심 비즈니스 로직을 수행하는 것이 주 관심사입니다.
    * 
* 인프라스트럭처 계층(Infrastructure Layer)
    * 상위 계층을 지원하는 것이 주 관심사입니다.
    * 기술적인 내용들이 포함되어 있습니다.

<p align="center">
    <img src="/images/layered-architecture-1.JPG" width="80%" class="image__border">
</p>



### 1.2. Open And Closed Layer

엄격한 레이어 아키텍처는 바로 아래 계층만 의존합니다. 
완화된 레이어 아키텍처는 이 제약을 완화시켜 자신의 하위 레이어는 모두 의존할 수 있습니다. 
이를 계층이 "닫혔다(close)" 혹은 "열렸다(open)"라고 표현합니다. 



그 이상을 넘어가진 않습니다. 


### 1.3. Benefits



보통 3, 4 계층 아키텍처를 






라자냐 아키텍처
테스트하기 쉬움 
쉽게 개발을 시작할 수 있음


## 2. Consideration

레이어 아키텍처를 적용할 때 다음과 같은 사항들을 고려합니다.

* 모델(model)과 뷰(view)를 분리합니다.
    * 모델은 도메인 설계에 따라 우리가 기대하는 시스템의 동작 모습이며 도메인 계층에 존재합니다.
    * 뷰는 사용자에게 보여지는 모습이며 사용자 인터페이스 계층에 존재합니다.
    * 모델은 화면 출력과 관련된 로직을 포함하지 않습니다.
    * 도메인 계층에서 사용자 인터페이스 계층에 직접 접근하지 않습니다.
* 깔끔하고 얇은 뷰(clean and thin view)를 가져야 합니다.
    * 
* 도메인과 영속성 로직을 다른 레이어로 분리합니다.



## 3. Sinkhole Anti Pattern

#### TEST CODE REPOSITORY

#### REFERENCE

* <https://www.oreilly.com/library/view/software-architecture-patterns/9781491971437/ch01.html>
* <http://pds19.egloos.com/pds/201106/28/18/Open_Session_In_View_Pattern.pdf>
