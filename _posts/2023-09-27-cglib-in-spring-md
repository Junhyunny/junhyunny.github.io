---
title: "CGLib in Spring"
search: false
category:
  - java
  - spring
  - spring-boot
last_modified_at: 2023-09-27T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

* [Dynamic Proxy in Java][dynamic-proxy-in-java-link]

## 0. 들어가면서

스프링 프레임워크(spring framework)는 동적 프록시(dynamic proxy)를 통해 개발자가 작성한 코드를 직접 수정하지 않고 기능을 확장합니다. 
[Dynamic Proxy in Java][dynamic-proxy-in-java-link] 포스트에서 다뤘듯 JDK 리플렉션(reflection) 패키지에서 제공하는 다이나믹 프록시는 다음과 같은 한계점을 가집니다. 

* 리플렉션 기능을 사용하기 때문에 속도가 느립니다.
* 인터페이스를 대상으로만 다이나믹 프록시를 적용할 수 있습니다. 

스프링 프레임워크는 이런 한계를 극복하기 위해 동적 프록시를 지원하는 라이브러리를 사용합니다. 
이번 포스트에선 스프링 프레임워크에서 기본적으로 채택하여 사용 중인 `CGLib`에 대해 살펴보겠습니다. 

## 1. CGLib(Code Generation Library)

런타임에 동적으로 클래스의 프록시 객체를 생성해줍니다. 
JDK 동적 프록시처럼 인터페이스만 지원하지 않고 클래스 기반 프록시 객체를 생성합니다. 
현재 다양한 프레임워크에서 사용되고 있습니다. 

* 하이버네이트
* 스프링 프레임워크
    * 스프링 프레임워크는 AOP(Aspect Oriented Programming) 기능을 지원하기 위해 CGLib 프록시 객체를 사용합니다. 
    * Spring Boot 2 버전부터 CGLib 프록싱을 기본적으로 사용하고 있으며 그 이유는 인터페이스 기반 프록시는 ClassCastException 예외를 추적하는 것을 어렵게 만들기 때문이라고 합니다.
    * <https://stackoverflow.com/questions/54980004/why-choose-cglib-proxying-as-the-default-after-springboot-2-0>




### 1.1. Enhance Class



### 1.2. How does it flow?

### 1.3. Limitation

## 2. Practice

## CLOSING

ByteBuddy 언급

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

* <https://www.baeldung.com/cglib>
* <https://github.com/cglib/cglib>
* <https://bytebuddy.net/#/>
* <https://www.youtube.com/watch?v=MFckVKrJLRQ>
* <https://stackoverflow.com/questions/54980004/why-choose-cglib-proxying-as-the-default-after-springboot-2-0>

[dynamic-proxy-in-java-link]: https://junhyunny.github.io/java/dynamic-proxy-in-java/