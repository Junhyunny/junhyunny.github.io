---
title: "Using RedisTemplate on Spring Boot"
search: false
category:
  - spring-boot
  - redis
last_modified_at: 2023-02-06T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

* [Embedded Redis Server][embedded-redis-server-link]

## 0. 들어가면서

현재 진행 중인 프로젝트의 특정 비즈니스에서 데이터를 저장할 수 있는 큐(queue)가 필요했습니다. 
다음과 같은 옵션이 있었습니다. 

* `Transactional Outbox` 패턴처럼 데이터베이스를 메세지 큐로 사용
* 사용자 세션(session)을 관리하는 레디스(redis)를 메세지 큐로 사용

크기가 작은 데이터이고, 엄격한 트랜잭션 처리가 필요 없기 때문에 레디스를 메세지 큐로 사용해보려고 합니다. 
이번 포스트는 간단한 시나리오를 토대로 레디스의 자료 구조 중 하나인 리스트(list)를 큐로 사용하는 예제를 다뤘습니다. 
 
## 1. Practice

### 1.1. Context of Practice

다음과 같은 실습 환경을 구축하였습니다. 

<p align="center">
    <img src="/images/using-redis-template-on-spring-boot-1.JPG" width="100%" class="image__border">
</p>

### 1.2. Structure of Package

```
./
├── Dockerfile
├── docker-compose.yml
├── mvnw
├── mvnw.cmd
├── pom.xml
├── run.sh
└── src
    ├── main
    │   ├── java
    │   │   └── action
    │   │       └── in
    │   │           └── blog
    │   │               ├── ActionInBlogApplication.java
    │   │               ├── client
    │   │               │   ├── InvitationEventClient.java
    │   │               │   └── RedisInvitationEventClient.java
    │   │               ├── config
    │   │               │   ├── EmbeddedRedisServerConfig.java
    │   │               │   └── RedisTemplateConfig.java
    │   │               ├── controller
    │   │               │   ├── InvitationController.java
    │   │               │   └── UserController.java
    │   │               ├── domain
    │   │               │   ├── Invitation.java
    │   │               │   ├── InvitationMessage.java
    │   │               │   ├── InvitationStatus.java
    │   │               │   └── QueueChannel.java
    │   │               └── proxy
    │   │                   ├── EmbbededRedisUserMessageProxy.java
    │   │                   ├── RedisUserMessageProxy.java
    │   │                   └── UserMessageProxy.java
    │   └── resources
    │       ├── application-dev.yml
    │       ├── application-local.yml
    │       └── application.yml
    └── test
        └── java
            └── action
                └── in
                    └── blog
                        └── app
                            └── ActionInBlogApplicationTests.java
```

### 1.3. pom.xml

```xml
    <dependencies>
        <dependency>
            <groupId>it.ozimov</groupIsd>
            <artifactId>embedded-redis</artifactId>
            <version>0.7.3</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-simple</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
    </dependencies>
```

### 1.4. application-dev.yml

```yml
spring:
  redis:
    host: redis-server
    password:
    port: 6379
```

## 2. Implementation

실제 구현 코드를 살펴보겠습니다. 

### 2.1. RedisTemplateConfig Class

```java
package action.in.blog.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.repository.configuration.EnableRedisRepositories;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
@EnableRedisRepositories
public class RedisTemplateConfig {

    @Value("${spring.redis.host}")
    private String host;
    @Value("${spring.redis.port}")
    private int port;

    @Bean
    public RedisSerializer<Object> springSessionDefaultRedisSerializer() {
        return new GenericJackson2JsonRedisSerializer();
    }

    @Bean
    public RedisConnectionFactory redisConnectionFactory() {
        return new LettuceConnectionFactory(host, port);
    }

    @Bean
    public RedisTemplate<String, Object> redisTemplate(
            RedisConnectionFactory connectionFactory,
            RedisSerializer<Object> springSessionDefaultRedisSerializer
    ) {
        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(connectionFactory);
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(springSessionDefaultRedisSerializer);
        return redisTemplate;
    }
}
```

### 2.2. InvitationController Class

```java
package action.in.blog.controller;

import action.in.blog.client.InvitationEventClient;
import action.in.blog.domain.Invitation;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RequiredArgsConstructor
@RestController
public class InvitationController {

    private final InvitationEventClient invitationEventClient;

    @PostMapping("/invitation")
    public void createPost(@RequestBody Invitation invitation) {
        invitationEventClient.pushInvitationMessage(invitation);
    }

    @PostMapping("/invitation/cancel")
    public void updatePost(@RequestBody Invitation invitation) {
        invitationEventClient.pushInvitationCancelMessage(invitation);
    }
}
```

#### 2.2.1. Invitation Class

```java
package action.in.blog.domain;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
public class Invitation {

    private String inviter;
    private String invitee;
}
```

### 2.3. RedisInvitationEventClient Class

```java
package action.in.blog.client;

import action.in.blog.domain.Invitation;
import action.in.blog.domain.InvitationMessage;
import action.in.blog.domain.InvitationStatus;
import action.in.blog.domain.QueueChannel;
import lombok.RequiredArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class RedisInvitationEventClient implements InvitationEventClient {

    private final RedisTemplate<String, Object> redisTemplate;

    @Override
    public void pushInvitationMessage(Invitation invitation) {
        String key = invitation.getInvitee();
        InvitationMessage message = InvitationMessage.builder()
                .inviter(invitation.getInviter())
                .status(InvitationStatus.INVITATION)
                .build();
        redisTemplate.opsForList().rightPush(QueueChannel.INVITATION.of(key), message);
    }

    @Override
    public void pushInvitationCancelMessage(Invitation invitation) {
        String key = invitation.getInvitee();
        InvitationMessage message = InvitationMessage.builder()
                .inviter(invitation.getInviter())
                .status(InvitationStatus.INVITATION_CANCEL)
                .build();
        redisTemplate.opsForList().rightPush(QueueChannel.INVITATION.of(key), message);
    }
}
```

#### 2.3.1. InvitationMessage Class

```java
package action.in.blog.domain;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
public class InvitationMessage {
    private String inviter;
    private InvitationStatus status;
}
```

#### 2.3.2. QueueChannel Enum

```java
package action.in.blog.domain;

public enum QueueChannel {

    INVITATION;

    public String of(String key) {
        return String.format("%s-%s", INVITATION.name(), key);
    }
}
```

### 2.4. UserController Class

```java
package action.in.blog.controller;

import action.in.blog.domain.InvitationMessage;
import action.in.blog.proxy.UserMessageProxy;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RequiredArgsConstructor
@RestController
public class UserController {

    private final UserMessageProxy userMessageProxy;

    @GetMapping("/user/messages/{userId}")
    public List<InvitationMessage> getInvitationMessage(@PathVariable("userId") String userId) {
        return userMessageProxy.getInvitationMessage(userId);
    }
}
```

### 2.4. RedisUserMessageProxy Class

```java
package action.in.blog.proxy;

import action.in.blog.domain.InvitationMessage;
import action.in.blog.domain.QueueChannel;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Profile;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

@Profile("!local")
@Component
@RequiredArgsConstructor
public class RedisUserMessageProxy implements UserMessageProxy {

    private final RedisTemplate<String, Object> redisTemplate;

    @Override
    public List<InvitationMessage> getInvitationMessage(String userId) {
        String channel = QueueChannel.INVITATION.of(userId);
        long size = redisTemplate.opsForList().size(channel);
        return (List) redisTemplate.opsForList().leftPop(channel, size);
    }
}
```

## 3. Test

### 3.1. Run Shell Script

##### Result of Test

## CLOSING

#### TEST CODE REPOSITORY

#### RECOMMEND NEXT POSTS

#### REFERENCE

* <https://sarc.io/index.php/cloud/1944-msa-transactional-outbox-pattern>
* <https://jojoldu.tistory.com/418>

[embedded-redis-server-link]: https://junhyunny.github.io/spring-boot/redis/embedded-redis-server/