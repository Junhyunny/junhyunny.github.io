---
title: "Layered Architecture"
search: false
category:
  - architecture
  - pattern
last_modified_at: 2022-10-04T23:55:00
---

<br>

## 0. 들어가면서

레이어 아키텍처(layered arhcitecture)는 학원에서 배우는 초급자부터 현장의 개발자들까지 많은 곳에서 사용되고, 널리 알려져있는 아키텍처 패턴입니다. 
익숙한만큼 쉽게 생각되지만, 어플리케이션이 커져감에 따라 레이어 아키텍처는 본연의 목적을 잃고 제 역할을 하지 못하는 경우가 발생합니다. 
레이어 아키텍처를 적용하여 얻고자하는 목표를 이해하고, 아키텍처 사상이 흔들리지 않도록 고려해야하는 원칙들은 무엇이 있는지 알아보겠습니다. 

## 1. Layered Architecture

이름처럼 계층 구조를 지닌 아키텍처입니다. 
구성되는 계층에 따라 N-계층 아키텍처라고 불립니다. 
비교적 단순한 어플리케이션은 3계층, 일반적으로 4계층을 가집니다. 

레이어 아키텍처를 적용하는 가장 큰 이유는 `관심사의 분리`입니다. 
각 계층 별로 책임을 부여하고, 맡은 역할만 수행합니다. 
하나의 계층이 모든 일을 처리할 수 없으므로 자신이 수행할 수 없는 일은 하위 계층에 의존하도록 시스템을 구성합니다. 

레이어 아키텍처를 통해 다음과 같은 목적을 이룰 수 있습니다.

* 서로 다른 계층으로 분리하여 전체적인 시스템 결합도를 낮춥니다.
    * 하위 계층은 인터페이스를 통해 접근하고, 실 구현 코드를 직접 사용하지 않습니다.
    * 각 계층을 모듈(module)로 관리하는 경우 배포 사이클을 각자 다르게 가질 수 있습니다.
* 재사용성을 높입니다.
    * 뷰(view) 표현을 위해 과도한 데이터 모습이 재사용성을 낮추는 과도한 조인(join) 쿼리로 이어지는 것을 
* 유지 보수성을 높입니다.
    * 


서로 다른 계층으로 분리하여 전체적인 시스템의 결합도를 낮추고, 재사용성을 높이고, 유지 보수성을 높이는 것이 


각 계층은 격리되어 있으며, 



### 1.1. 4-Layered Architecture

자료마다 용어는 일부 다르지만, 의미는 같았기에 조금 더 범용적인 용어를 사용하는 예시를 참고하였습니다. 
각 계층 별로 맡은 책임과 해야하는 일에 대해서 

* 

<p align="center">
    <img src="/images/layered-architecture-1.JPG" width="80%" class="image__border">
</p>



### 1.2. Open And Closed Layer

엄격한 레이어 아키텍처는 바로 아래 계층만 의존합니다. 
완화된 레이어 아키텍처는 이 제약을 완화시켜 자신의 하위 레이어는 모두 의존할 수 있습니다. 


그 이상을 넘어가진 않습니다. 


### 1.3. Benefits






보통 3, 4 계층 아키텍처를 






라자냐 아키텍처
테스트하기 쉬움 
쉽게 개발을 시작할 수 있음


## 2. Consideration

레이어 아키텍처를 적용할 때 다음과 같은 사항들을 고려하여 

* 모델(model)과 뷰(view)를 분리합니다.
* 깔끔하고 얇은 뷰(clean and thin view)를 가져야 합니다.
* 도메인과 영속성 로직을 다른 레이어로 분리합니다.



## 3. Sinkhole Anti Pattern

#### TEST CODE REPOSITORY

#### REFERENCE

* <https://www.oreilly.com/library/view/software-architecture-patterns/9781491971437/ch01.html>
* <http://pds19.egloos.com/pds/201106/28/18/Open_Session_In_View_Pattern.pdf>
