---
title: "Namespace in Kubernetes"
search: false
category:
  - kubernetes
last_modified_at: 2023-12-27T23:55:00
---

<br/>

#### RECOMMEND POSTS BEFORE THIS

- [Kubernetes Architecture][kubernetes-architecture-link]

## 1. Namespace

쿠버네티스의 네임스페이스(namespace)는 단일 클러스터 내에서 리소스 그룹을 격리하는 메커니즘(mechanism)을 제공한다. 파드(pod), 레플리카 세트(replica set), 디플로이먼트(deployment) 같은 오브젝트들은 모두 네임스페이스 내부에 배포된다. 

- 하나의 네임스페이스 내에서 리소스 이름은 유일해야 한다.
- 동일한 이름을 가진 리소스가 서로 다른 네임스페이스에 존재하는 것은 가능하다.

네임스페이스는 논리적인 구분이기 때문에 리소스를 완전히 격리하는 것은 아니다. 다른 네임스페이스에 위치한 오브젝트들과 통신할 수 있다. 쿠버네티스 환경을 구축하면 기본적으로 4개의 네임스페이스가 만들어져 있다. 

- default
  - 별도로 네임스페이스를 생성하지 않았다면 기본으로 사용되는 네임스페이스다.
- kube-node-lease
  - 각 노드와 연관된 리스(lease) 오브젝트가 존재하는 네임스페이스다.
  - 노드 리스는 kublet이 하트 비트(heart beat)를 보내 컨트롤 플레인이 노드의 장애가 발생한 것을 탐지하는 용도로 사용한다.
- kube-public
  - 인증되지 않은 클라이언트를 포함한 모든 클라이언트가 읽기 권한으로 접근할 수 있는 네임스페이스다.
  - 주로 전체 클러스터 중에 공개적으로 드러나서 읽을 수 있는 리소스를 위해 예약되어 있다.
- kube-system
  - 쿠버네티스 시스템에서 생성한 오브젝트들을 위한 네임스페이스다.

워커 노드 3개에 dev, prod 네임스페이스를 추가하면 다음과 같은 모습을 가진다. default 네임스페이스 외에 쿠버네티스가 생성한 네임스페이스들은 제외했다. 위에서 설명했듯 각 네임스페이스에서 관리되는 오브젝트들은 각자 이름은 고유해야 한다. 동일한 이름을 가진 리소스가 서로 다른 네임스페이스에 존재하는 것은 가능하다. 

<p align="center">
  <img src="/images/namespace-in-kubernetes-01.png" width="80%" class="image__border">
</p>

### 1.1. Objects in Namespace

모든 리소스가 네임스페이스에 포함되진 않는다. 파드, 서비스, 디플로이먼트, 레플리카 세트, 레플리케이션 컨트롤러(replication controller) 같은 대부분의 리소스들은 네임스페이스에 포함된다. 노드(node)나 퍼시스턴트 볼륨(persistent volume) 같은 저수준 리소스는 어느 네임스페이스에도 속하지 않는다. 네임스페이스에 속하지 않는 리소스들은 네임스페이스 기반 스코핑이 불가능하다. 다음 명령어로 어떤 타입의 오브젝트들이 네임스페이스에 포함될 수 있는지 아닌지 판단할 수 있다.

```
# 네임스페이스에 속하는 리소스
kubectl api-resources --namespaced=true

bindings                                 v1                             true         Binding
configmaps                  cm           v1                             true         ConfigMap
endpoints                   ep           v1                             true         Endpoints
events                      ev           v1                             true         Event
limitranges                 limits       v1                             true         LimitRange
persistentvolumeclaims      pvc          v1                             true         PersistentVolumeClaim
pods                        po           v1                             true         Pod
podtemplates                             v1                             true         PodTemplate
...
```

```
# 네임스페이스에 속하지 않는 리소스
kubectl api-resources --namespaced=false

componentstatuses                 cs           v1                                     false        ComponentStatus
namespaces                        ns           v1                                     false        Namespace
nodes                             no           v1                                     false        Node
persistentvolumes                 pv           v1                                     false        PersistentVolume
mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        false        MutatingWebhookConfiguration
validatingwebhookconfigurations                admissionregistration.k8s.io/v1        false        ValidatingWebhookConfiguration
customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                false        CustomResourceDefinition
apiservices                                    apiregistration.k8s.io/v1              false        APIService
...
```

### 1.2. Benefits

공식 문서를 보면 여러 개의 네임스페이스를 사용하는 것에 대한 가이드라인을 제시하고 있다. 

> 네임스페이스는 여러 개의 팀이나, 프로젝트에 걸쳐서 많은 사용자가 있는 환경에서 사용하도록 만들어졌다. 사용자가 거의 없거나, 수 십명 정도가 되는 경우에는 네임스페이스를 전혀 고려할 필요가 없다. 네임스페이스가 제공하는 기능이 필요할 때 사용하도록 하자.

시스템을 구성할 수 있는 상황에 따라 달라지겠지만, 리소스를 확실히 구분할 수 있도록 개발, 스테이지, 운영 같은 서비스 배포 환경 단위로 나눌 필요는 있어 보인다. 네임스페이스를 사용하면 다음과 같은 장점을 얻을 수 있다.

- 

## 2. Practice

네임스페이스 컨셉을 확인하기 위한 간단한 환경을 구성한다.


다음과 같은 내용을 확인해본다. 


## CLOSING

#### TEST CODE REPOSITORY

- <https://github.com/Junhyunny/blog-in-action/tree/master/2023-12-27-namespace-in-kubernetes>

#### REFERENCE

- <https://www.udemy.com/course/certified-kubernetes-application-developer/>
- <https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/namespaces/>
- <https://kubernetes.io/ko/docs/tasks/administer-cluster/namespaces/>
- <https://kubeops.net/blog/the-importance-of-kubernetes-namespace-separation>
- <https://hw-kang.tistory.com/43>

[kubernetes-architecture-link]: https://junhyunny.github.io/kubernetes/kubernetes-architecture/